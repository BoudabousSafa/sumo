# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_libsumo', [dirname(__file__)])
        except ImportError:
            import _libsumo
            return _libsumo
        if fp is not None:
            try:
                _mod = imp.load_module('_libsumo', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _libsumo = swig_import_helper()
    del swig_import_helper
else:
    import _libsumo
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def init(port):
    print("Warning! To make your code usable with traci and libsumo, please use traci.start instead of traci.init.")

def close():
    pass

def start(args):
    simulation.load(args[1:])

def simulationStep(step=0):
    simulation.step(step)

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libsumo.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _libsumo.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _libsumo.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _libsumo.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _libsumo.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _libsumo.SwigPyIterator_equal(self, x)

    def copy(self):
        return _libsumo.SwigPyIterator_copy(self)

    def next(self):
        return _libsumo.SwigPyIterator_next(self)

    def __next__(self):
        return _libsumo.SwigPyIterator___next__(self)

    def previous(self):
        return _libsumo.SwigPyIterator_previous(self)

    def advance(self, n):
        return _libsumo.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _libsumo.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _libsumo.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _libsumo.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _libsumo.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _libsumo.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _libsumo.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _libsumo.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _libsumo.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libsumo.StringVector___nonzero__(self)

    def __bool__(self):
        return _libsumo.StringVector___bool__(self)

    def __len__(self):
        return _libsumo.StringVector___len__(self)

    def pop(self):
        return _libsumo.StringVector_pop(self)

    def __getslice__(self, i, j):
        return _libsumo.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libsumo.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libsumo.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libsumo.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libsumo.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libsumo.StringVector___setitem__(self, *args)

    def append(self, x):
        return _libsumo.StringVector_append(self, x)

    def empty(self):
        return _libsumo.StringVector_empty(self)

    def size(self):
        return _libsumo.StringVector_size(self)

    def clear(self):
        return _libsumo.StringVector_clear(self)

    def swap(self, v):
        return _libsumo.StringVector_swap(self, v)

    def get_allocator(self):
        return _libsumo.StringVector_get_allocator(self)

    def begin(self):
        return _libsumo.StringVector_begin(self)

    def end(self):
        return _libsumo.StringVector_end(self)

    def rbegin(self):
        return _libsumo.StringVector_rbegin(self)

    def rend(self):
        return _libsumo.StringVector_rend(self)

    def pop_back(self):
        return _libsumo.StringVector_pop_back(self)

    def erase(self, *args):
        return _libsumo.StringVector_erase(self, *args)

    def __init__(self, *args):
        this = _libsumo.new_StringVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _libsumo.StringVector_push_back(self, x)

    def front(self):
        return _libsumo.StringVector_front(self)

    def back(self):
        return _libsumo.StringVector_back(self)

    def assign(self, n, x):
        return _libsumo.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _libsumo.StringVector_resize(self, *args)

    def insert(self, *args):
        return _libsumo.StringVector_insert(self, *args)

    def reserve(self, n):
        return _libsumo.StringVector_reserve(self, n)

    def capacity(self):
        return _libsumo.StringVector_capacity(self)
    __swig_destroy__ = _libsumo.delete_StringVector
    __del__ = lambda self: None
StringVector_swigregister = _libsumo.StringVector_swigregister
StringVector_swigregister(StringVector)

class TraCIStageVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraCIStageVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TraCIStageVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _libsumo.TraCIStageVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libsumo.TraCIStageVector___nonzero__(self)

    def __bool__(self):
        return _libsumo.TraCIStageVector___bool__(self)

    def __len__(self):
        return _libsumo.TraCIStageVector___len__(self)

    def pop(self):
        return _libsumo.TraCIStageVector_pop(self)

    def __getslice__(self, i, j):
        return _libsumo.TraCIStageVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libsumo.TraCIStageVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libsumo.TraCIStageVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libsumo.TraCIStageVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libsumo.TraCIStageVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libsumo.TraCIStageVector___setitem__(self, *args)

    def append(self, x):
        return _libsumo.TraCIStageVector_append(self, x)

    def empty(self):
        return _libsumo.TraCIStageVector_empty(self)

    def size(self):
        return _libsumo.TraCIStageVector_size(self)

    def clear(self):
        return _libsumo.TraCIStageVector_clear(self)

    def swap(self, v):
        return _libsumo.TraCIStageVector_swap(self, v)

    def get_allocator(self):
        return _libsumo.TraCIStageVector_get_allocator(self)

    def begin(self):
        return _libsumo.TraCIStageVector_begin(self)

    def end(self):
        return _libsumo.TraCIStageVector_end(self)

    def rbegin(self):
        return _libsumo.TraCIStageVector_rbegin(self)

    def rend(self):
        return _libsumo.TraCIStageVector_rend(self)

    def pop_back(self):
        return _libsumo.TraCIStageVector_pop_back(self)

    def erase(self, *args):
        return _libsumo.TraCIStageVector_erase(self, *args)

    def __init__(self, *args):
        this = _libsumo.new_TraCIStageVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _libsumo.TraCIStageVector_push_back(self, x)

    def front(self):
        return _libsumo.TraCIStageVector_front(self)

    def back(self):
        return _libsumo.TraCIStageVector_back(self)

    def assign(self, n, x):
        return _libsumo.TraCIStageVector_assign(self, n, x)

    def resize(self, *args):
        return _libsumo.TraCIStageVector_resize(self, *args)

    def insert(self, *args):
        return _libsumo.TraCIStageVector_insert(self, *args)

    def reserve(self, n):
        return _libsumo.TraCIStageVector_reserve(self, n)

    def capacity(self):
        return _libsumo.TraCIStageVector_capacity(self)
    __swig_destroy__ = _libsumo.delete_TraCIStageVector
    __del__ = lambda self: None
TraCIStageVector_swigregister = _libsumo.TraCIStageVector_swigregister
TraCIStageVector_swigregister(TraCIStageVector)


_libsumo.DEFAULT_VIEW_swigconstant(_libsumo)
DEFAULT_VIEW = _libsumo.DEFAULT_VIEW

_libsumo.PRECISION_swigconstant(_libsumo)
PRECISION = _libsumo.PRECISION
class TraCIException(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraCIException, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TraCIException, name)
    __repr__ = _swig_repr

    def __init__(self, what):
        this = _libsumo.new_TraCIException(what)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _libsumo.delete_TraCIException
    __del__ = lambda self: None
TraCIException_swigregister = _libsumo.TraCIException_swigregister
TraCIException_swigregister(TraCIException)

class TraCIPosition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraCIPosition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TraCIPosition, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _libsumo.TraCIPosition_x_set
    __swig_getmethods__["x"] = _libsumo.TraCIPosition_x_get
    if _newclass:
        x = _swig_property(_libsumo.TraCIPosition_x_get, _libsumo.TraCIPosition_x_set)
    __swig_setmethods__["y"] = _libsumo.TraCIPosition_y_set
    __swig_getmethods__["y"] = _libsumo.TraCIPosition_y_get
    if _newclass:
        y = _swig_property(_libsumo.TraCIPosition_y_get, _libsumo.TraCIPosition_y_set)
    __swig_setmethods__["z"] = _libsumo.TraCIPosition_z_set
    __swig_getmethods__["z"] = _libsumo.TraCIPosition_z_get
    if _newclass:
        z = _swig_property(_libsumo.TraCIPosition_z_get, _libsumo.TraCIPosition_z_set)

    def __init__(self):
        this = _libsumo.new_TraCIPosition()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _libsumo.delete_TraCIPosition
    __del__ = lambda self: None
TraCIPosition_swigregister = _libsumo.TraCIPosition_swigregister
TraCIPosition_swigregister(TraCIPosition)

class TraCIColor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraCIColor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TraCIColor, name)
    __repr__ = _swig_repr
    __swig_setmethods__["r"] = _libsumo.TraCIColor_r_set
    __swig_getmethods__["r"] = _libsumo.TraCIColor_r_get
    if _newclass:
        r = _swig_property(_libsumo.TraCIColor_r_get, _libsumo.TraCIColor_r_set)
    __swig_setmethods__["g"] = _libsumo.TraCIColor_g_set
    __swig_getmethods__["g"] = _libsumo.TraCIColor_g_get
    if _newclass:
        g = _swig_property(_libsumo.TraCIColor_g_get, _libsumo.TraCIColor_g_set)
    __swig_setmethods__["b"] = _libsumo.TraCIColor_b_set
    __swig_getmethods__["b"] = _libsumo.TraCIColor_b_get
    if _newclass:
        b = _swig_property(_libsumo.TraCIColor_b_get, _libsumo.TraCIColor_b_set)
    __swig_setmethods__["a"] = _libsumo.TraCIColor_a_set
    __swig_getmethods__["a"] = _libsumo.TraCIColor_a_get
    if _newclass:
        a = _swig_property(_libsumo.TraCIColor_a_get, _libsumo.TraCIColor_a_set)

    def __init__(self):
        this = _libsumo.new_TraCIColor()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _libsumo.delete_TraCIColor
    __del__ = lambda self: None
TraCIColor_swigregister = _libsumo.TraCIColor_swigregister
TraCIColor_swigregister(TraCIColor)

class TraCIBoundary(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraCIBoundary, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TraCIBoundary, name)
    __repr__ = _swig_repr
    __swig_setmethods__["xMin"] = _libsumo.TraCIBoundary_xMin_set
    __swig_getmethods__["xMin"] = _libsumo.TraCIBoundary_xMin_get
    if _newclass:
        xMin = _swig_property(_libsumo.TraCIBoundary_xMin_get, _libsumo.TraCIBoundary_xMin_set)
    __swig_setmethods__["yMin"] = _libsumo.TraCIBoundary_yMin_set
    __swig_getmethods__["yMin"] = _libsumo.TraCIBoundary_yMin_get
    if _newclass:
        yMin = _swig_property(_libsumo.TraCIBoundary_yMin_get, _libsumo.TraCIBoundary_yMin_set)
    __swig_setmethods__["zMin"] = _libsumo.TraCIBoundary_zMin_set
    __swig_getmethods__["zMin"] = _libsumo.TraCIBoundary_zMin_get
    if _newclass:
        zMin = _swig_property(_libsumo.TraCIBoundary_zMin_get, _libsumo.TraCIBoundary_zMin_set)
    __swig_setmethods__["xMax"] = _libsumo.TraCIBoundary_xMax_set
    __swig_getmethods__["xMax"] = _libsumo.TraCIBoundary_xMax_get
    if _newclass:
        xMax = _swig_property(_libsumo.TraCIBoundary_xMax_get, _libsumo.TraCIBoundary_xMax_set)
    __swig_setmethods__["yMax"] = _libsumo.TraCIBoundary_yMax_set
    __swig_getmethods__["yMax"] = _libsumo.TraCIBoundary_yMax_get
    if _newclass:
        yMax = _swig_property(_libsumo.TraCIBoundary_yMax_get, _libsumo.TraCIBoundary_yMax_set)
    __swig_setmethods__["zMax"] = _libsumo.TraCIBoundary_zMax_set
    __swig_getmethods__["zMax"] = _libsumo.TraCIBoundary_zMax_get
    if _newclass:
        zMax = _swig_property(_libsumo.TraCIBoundary_zMax_get, _libsumo.TraCIBoundary_zMax_set)

    def __init__(self):
        this = _libsumo.new_TraCIBoundary()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _libsumo.delete_TraCIBoundary
    __del__ = lambda self: None
TraCIBoundary_swigregister = _libsumo.TraCIBoundary_swigregister
TraCIBoundary_swigregister(TraCIBoundary)

class TraCIValue(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraCIValue, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TraCIValue, name)
    __repr__ = _swig_repr
    __swig_setmethods__["string"] = _libsumo.TraCIValue_string_set
    __swig_getmethods__["string"] = _libsumo.TraCIValue_string_get
    if _newclass:
        string = _swig_property(_libsumo.TraCIValue_string_get, _libsumo.TraCIValue_string_set)
    __swig_setmethods__["stringList"] = _libsumo.TraCIValue_stringList_set
    __swig_getmethods__["stringList"] = _libsumo.TraCIValue_stringList_get
    if _newclass:
        stringList = _swig_property(_libsumo.TraCIValue_stringList_get, _libsumo.TraCIValue_stringList_set)

    def __init__(self):
        this = _libsumo.new_TraCIValue()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _libsumo.delete_TraCIValue
    __del__ = lambda self: None
TraCIValue_swigregister = _libsumo.TraCIValue_swigregister
TraCIValue_swigregister(TraCIValue)

class TraCIPhase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraCIPhase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TraCIPhase, name)
    __repr__ = _swig_repr

    def __init__(self, _duration, _duration1, _duration2, _phase):
        this = _libsumo.new_TraCIPhase(_duration, _duration1, _duration2, _phase)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _libsumo.delete_TraCIPhase
    __del__ = lambda self: None
    __swig_setmethods__["duration"] = _libsumo.TraCIPhase_duration_set
    __swig_getmethods__["duration"] = _libsumo.TraCIPhase_duration_get
    if _newclass:
        duration = _swig_property(_libsumo.TraCIPhase_duration_get, _libsumo.TraCIPhase_duration_set)
    __swig_setmethods__["duration1"] = _libsumo.TraCIPhase_duration1_set
    __swig_getmethods__["duration1"] = _libsumo.TraCIPhase_duration1_get
    if _newclass:
        duration1 = _swig_property(_libsumo.TraCIPhase_duration1_get, _libsumo.TraCIPhase_duration1_set)
    __swig_setmethods__["duration2"] = _libsumo.TraCIPhase_duration2_set
    __swig_getmethods__["duration2"] = _libsumo.TraCIPhase_duration2_get
    if _newclass:
        duration2 = _swig_property(_libsumo.TraCIPhase_duration2_get, _libsumo.TraCIPhase_duration2_set)
    __swig_setmethods__["phase"] = _libsumo.TraCIPhase_phase_set
    __swig_getmethods__["phase"] = _libsumo.TraCIPhase_phase_get
    if _newclass:
        phase = _swig_property(_libsumo.TraCIPhase_phase_get, _libsumo.TraCIPhase_phase_set)
TraCIPhase_swigregister = _libsumo.TraCIPhase_swigregister
TraCIPhase_swigregister(TraCIPhase)

class TraCILogic(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraCILogic, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TraCILogic, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _libsumo.new_TraCILogic(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _libsumo.delete_TraCILogic
    __del__ = lambda self: None
    __swig_setmethods__["subID"] = _libsumo.TraCILogic_subID_set
    __swig_getmethods__["subID"] = _libsumo.TraCILogic_subID_get
    if _newclass:
        subID = _swig_property(_libsumo.TraCILogic_subID_get, _libsumo.TraCILogic_subID_set)
    __swig_setmethods__["type"] = _libsumo.TraCILogic_type_set
    __swig_getmethods__["type"] = _libsumo.TraCILogic_type_get
    if _newclass:
        type = _swig_property(_libsumo.TraCILogic_type_get, _libsumo.TraCILogic_type_set)
    __swig_setmethods__["currentPhaseIndex"] = _libsumo.TraCILogic_currentPhaseIndex_set
    __swig_getmethods__["currentPhaseIndex"] = _libsumo.TraCILogic_currentPhaseIndex_get
    if _newclass:
        currentPhaseIndex = _swig_property(_libsumo.TraCILogic_currentPhaseIndex_get, _libsumo.TraCILogic_currentPhaseIndex_set)
    __swig_setmethods__["phases"] = _libsumo.TraCILogic_phases_set
    __swig_getmethods__["phases"] = _libsumo.TraCILogic_phases_get
    if _newclass:
        phases = _swig_property(_libsumo.TraCILogic_phases_get, _libsumo.TraCILogic_phases_set)
    __swig_setmethods__["subParameter"] = _libsumo.TraCILogic_subParameter_set
    __swig_getmethods__["subParameter"] = _libsumo.TraCILogic_subParameter_get
    if _newclass:
        subParameter = _swig_property(_libsumo.TraCILogic_subParameter_get, _libsumo.TraCILogic_subParameter_set)
TraCILogic_swigregister = _libsumo.TraCILogic_swigregister
TraCILogic_swigregister(TraCILogic)

class TraCILink(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraCILink, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TraCILink, name)
    __repr__ = _swig_repr

    def __init__(self, _from, _via, _to):
        this = _libsumo.new_TraCILink(_from, _via, _to)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _libsumo.delete_TraCILink
    __del__ = lambda self: None
    __swig_setmethods__["fromLane"] = _libsumo.TraCILink_fromLane_set
    __swig_getmethods__["fromLane"] = _libsumo.TraCILink_fromLane_get
    if _newclass:
        fromLane = _swig_property(_libsumo.TraCILink_fromLane_get, _libsumo.TraCILink_fromLane_set)
    __swig_setmethods__["viaLane"] = _libsumo.TraCILink_viaLane_set
    __swig_getmethods__["viaLane"] = _libsumo.TraCILink_viaLane_get
    if _newclass:
        viaLane = _swig_property(_libsumo.TraCILink_viaLane_get, _libsumo.TraCILink_viaLane_set)
    __swig_setmethods__["toLane"] = _libsumo.TraCILink_toLane_set
    __swig_getmethods__["toLane"] = _libsumo.TraCILink_toLane_get
    if _newclass:
        toLane = _swig_property(_libsumo.TraCILink_toLane_get, _libsumo.TraCILink_toLane_set)
TraCILink_swigregister = _libsumo.TraCILink_swigregister
TraCILink_swigregister(TraCILink)

class TraCIConnection(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraCIConnection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TraCIConnection, name)
    __repr__ = _swig_repr

    def __init__(self, _approachedLane, _hasPrio, _isOpen, _hasFoe, _approachedInternal, _state, _direction, _length):
        this = _libsumo.new_TraCIConnection(_approachedLane, _hasPrio, _isOpen, _hasFoe, _approachedInternal, _state, _direction, _length)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _libsumo.delete_TraCIConnection
    __del__ = lambda self: None
    __swig_setmethods__["approachedLane"] = _libsumo.TraCIConnection_approachedLane_set
    __swig_getmethods__["approachedLane"] = _libsumo.TraCIConnection_approachedLane_get
    if _newclass:
        approachedLane = _swig_property(_libsumo.TraCIConnection_approachedLane_get, _libsumo.TraCIConnection_approachedLane_set)
    __swig_setmethods__["hasPrio"] = _libsumo.TraCIConnection_hasPrio_set
    __swig_getmethods__["hasPrio"] = _libsumo.TraCIConnection_hasPrio_get
    if _newclass:
        hasPrio = _swig_property(_libsumo.TraCIConnection_hasPrio_get, _libsumo.TraCIConnection_hasPrio_set)
    __swig_setmethods__["isOpen"] = _libsumo.TraCIConnection_isOpen_set
    __swig_getmethods__["isOpen"] = _libsumo.TraCIConnection_isOpen_get
    if _newclass:
        isOpen = _swig_property(_libsumo.TraCIConnection_isOpen_get, _libsumo.TraCIConnection_isOpen_set)
    __swig_setmethods__["hasFoe"] = _libsumo.TraCIConnection_hasFoe_set
    __swig_getmethods__["hasFoe"] = _libsumo.TraCIConnection_hasFoe_get
    if _newclass:
        hasFoe = _swig_property(_libsumo.TraCIConnection_hasFoe_get, _libsumo.TraCIConnection_hasFoe_set)
    __swig_setmethods__["approachedInternal"] = _libsumo.TraCIConnection_approachedInternal_set
    __swig_getmethods__["approachedInternal"] = _libsumo.TraCIConnection_approachedInternal_get
    if _newclass:
        approachedInternal = _swig_property(_libsumo.TraCIConnection_approachedInternal_get, _libsumo.TraCIConnection_approachedInternal_set)
    __swig_setmethods__["state"] = _libsumo.TraCIConnection_state_set
    __swig_getmethods__["state"] = _libsumo.TraCIConnection_state_get
    if _newclass:
        state = _swig_property(_libsumo.TraCIConnection_state_get, _libsumo.TraCIConnection_state_set)
    __swig_setmethods__["direction"] = _libsumo.TraCIConnection_direction_set
    __swig_getmethods__["direction"] = _libsumo.TraCIConnection_direction_get
    if _newclass:
        direction = _swig_property(_libsumo.TraCIConnection_direction_get, _libsumo.TraCIConnection_direction_set)
    __swig_setmethods__["length"] = _libsumo.TraCIConnection_length_set
    __swig_getmethods__["length"] = _libsumo.TraCIConnection_length_get
    if _newclass:
        length = _swig_property(_libsumo.TraCIConnection_length_get, _libsumo.TraCIConnection_length_set)
TraCIConnection_swigregister = _libsumo.TraCIConnection_swigregister
TraCIConnection_swigregister(TraCIConnection)

class TraCIVehicleData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraCIVehicleData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TraCIVehicleData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["id"] = _libsumo.TraCIVehicleData_id_set
    __swig_getmethods__["id"] = _libsumo.TraCIVehicleData_id_get
    if _newclass:
        id = _swig_property(_libsumo.TraCIVehicleData_id_get, _libsumo.TraCIVehicleData_id_set)
    __swig_setmethods__["length"] = _libsumo.TraCIVehicleData_length_set
    __swig_getmethods__["length"] = _libsumo.TraCIVehicleData_length_get
    if _newclass:
        length = _swig_property(_libsumo.TraCIVehicleData_length_get, _libsumo.TraCIVehicleData_length_set)
    __swig_setmethods__["entryTime"] = _libsumo.TraCIVehicleData_entryTime_set
    __swig_getmethods__["entryTime"] = _libsumo.TraCIVehicleData_entryTime_get
    if _newclass:
        entryTime = _swig_property(_libsumo.TraCIVehicleData_entryTime_get, _libsumo.TraCIVehicleData_entryTime_set)
    __swig_setmethods__["leaveTime"] = _libsumo.TraCIVehicleData_leaveTime_set
    __swig_getmethods__["leaveTime"] = _libsumo.TraCIVehicleData_leaveTime_get
    if _newclass:
        leaveTime = _swig_property(_libsumo.TraCIVehicleData_leaveTime_get, _libsumo.TraCIVehicleData_leaveTime_set)
    __swig_setmethods__["typeID"] = _libsumo.TraCIVehicleData_typeID_set
    __swig_getmethods__["typeID"] = _libsumo.TraCIVehicleData_typeID_get
    if _newclass:
        typeID = _swig_property(_libsumo.TraCIVehicleData_typeID_get, _libsumo.TraCIVehicleData_typeID_set)

    def __init__(self):
        this = _libsumo.new_TraCIVehicleData()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _libsumo.delete_TraCIVehicleData
    __del__ = lambda self: None
TraCIVehicleData_swigregister = _libsumo.TraCIVehicleData_swigregister
TraCIVehicleData_swigregister(TraCIVehicleData)

class TraCINextTLSData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraCINextTLSData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TraCINextTLSData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["id"] = _libsumo.TraCINextTLSData_id_set
    __swig_getmethods__["id"] = _libsumo.TraCINextTLSData_id_get
    if _newclass:
        id = _swig_property(_libsumo.TraCINextTLSData_id_get, _libsumo.TraCINextTLSData_id_set)
    __swig_setmethods__["tlIndex"] = _libsumo.TraCINextTLSData_tlIndex_set
    __swig_getmethods__["tlIndex"] = _libsumo.TraCINextTLSData_tlIndex_get
    if _newclass:
        tlIndex = _swig_property(_libsumo.TraCINextTLSData_tlIndex_get, _libsumo.TraCINextTLSData_tlIndex_set)
    __swig_setmethods__["dist"] = _libsumo.TraCINextTLSData_dist_set
    __swig_getmethods__["dist"] = _libsumo.TraCINextTLSData_dist_get
    if _newclass:
        dist = _swig_property(_libsumo.TraCINextTLSData_dist_get, _libsumo.TraCINextTLSData_dist_set)
    __swig_setmethods__["state"] = _libsumo.TraCINextTLSData_state_set
    __swig_getmethods__["state"] = _libsumo.TraCINextTLSData_state_get
    if _newclass:
        state = _swig_property(_libsumo.TraCINextTLSData_state_get, _libsumo.TraCINextTLSData_state_set)

    def __init__(self):
        this = _libsumo.new_TraCINextTLSData()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _libsumo.delete_TraCINextTLSData
    __del__ = lambda self: None
TraCINextTLSData_swigregister = _libsumo.TraCINextTLSData_swigregister
TraCINextTLSData_swigregister(TraCINextTLSData)

class TraCIBestLanesData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraCIBestLanesData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TraCIBestLanesData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["laneID"] = _libsumo.TraCIBestLanesData_laneID_set
    __swig_getmethods__["laneID"] = _libsumo.TraCIBestLanesData_laneID_get
    if _newclass:
        laneID = _swig_property(_libsumo.TraCIBestLanesData_laneID_get, _libsumo.TraCIBestLanesData_laneID_set)
    __swig_setmethods__["length"] = _libsumo.TraCIBestLanesData_length_set
    __swig_getmethods__["length"] = _libsumo.TraCIBestLanesData_length_get
    if _newclass:
        length = _swig_property(_libsumo.TraCIBestLanesData_length_get, _libsumo.TraCIBestLanesData_length_set)
    __swig_setmethods__["occupation"] = _libsumo.TraCIBestLanesData_occupation_set
    __swig_getmethods__["occupation"] = _libsumo.TraCIBestLanesData_occupation_get
    if _newclass:
        occupation = _swig_property(_libsumo.TraCIBestLanesData_occupation_get, _libsumo.TraCIBestLanesData_occupation_set)
    __swig_setmethods__["bestLaneOffset"] = _libsumo.TraCIBestLanesData_bestLaneOffset_set
    __swig_getmethods__["bestLaneOffset"] = _libsumo.TraCIBestLanesData_bestLaneOffset_get
    if _newclass:
        bestLaneOffset = _swig_property(_libsumo.TraCIBestLanesData_bestLaneOffset_get, _libsumo.TraCIBestLanesData_bestLaneOffset_set)
    __swig_setmethods__["allowsContinuation"] = _libsumo.TraCIBestLanesData_allowsContinuation_set
    __swig_getmethods__["allowsContinuation"] = _libsumo.TraCIBestLanesData_allowsContinuation_get
    if _newclass:
        allowsContinuation = _swig_property(_libsumo.TraCIBestLanesData_allowsContinuation_get, _libsumo.TraCIBestLanesData_allowsContinuation_set)
    __swig_setmethods__["continuationLanes"] = _libsumo.TraCIBestLanesData_continuationLanes_set
    __swig_getmethods__["continuationLanes"] = _libsumo.TraCIBestLanesData_continuationLanes_get
    if _newclass:
        continuationLanes = _swig_property(_libsumo.TraCIBestLanesData_continuationLanes_get, _libsumo.TraCIBestLanesData_continuationLanes_set)

    def __init__(self):
        this = _libsumo.new_TraCIBestLanesData()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _libsumo.delete_TraCIBestLanesData
    __del__ = lambda self: None
TraCIBestLanesData_swigregister = _libsumo.TraCIBestLanesData_swigregister
TraCIBestLanesData_swigregister(TraCIBestLanesData)

class TraCIStage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraCIStage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TraCIStage, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _libsumo.new_TraCIStage(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_setmethods__["type"] = _libsumo.TraCIStage_type_set
    __swig_getmethods__["type"] = _libsumo.TraCIStage_type_get
    if _newclass:
        type = _swig_property(_libsumo.TraCIStage_type_get, _libsumo.TraCIStage_type_set)
    __swig_setmethods__["line"] = _libsumo.TraCIStage_line_set
    __swig_getmethods__["line"] = _libsumo.TraCIStage_line_get
    if _newclass:
        line = _swig_property(_libsumo.TraCIStage_line_get, _libsumo.TraCIStage_line_set)
    __swig_setmethods__["destStop"] = _libsumo.TraCIStage_destStop_set
    __swig_getmethods__["destStop"] = _libsumo.TraCIStage_destStop_get
    if _newclass:
        destStop = _swig_property(_libsumo.TraCIStage_destStop_get, _libsumo.TraCIStage_destStop_set)
    __swig_setmethods__["edges"] = _libsumo.TraCIStage_edges_set
    __swig_getmethods__["edges"] = _libsumo.TraCIStage_edges_get
    if _newclass:
        edges = _swig_property(_libsumo.TraCIStage_edges_get, _libsumo.TraCIStage_edges_set)
    __swig_setmethods__["travelTime"] = _libsumo.TraCIStage_travelTime_set
    __swig_getmethods__["travelTime"] = _libsumo.TraCIStage_travelTime_get
    if _newclass:
        travelTime = _swig_property(_libsumo.TraCIStage_travelTime_get, _libsumo.TraCIStage_travelTime_set)
    __swig_setmethods__["cost"] = _libsumo.TraCIStage_cost_set
    __swig_getmethods__["cost"] = _libsumo.TraCIStage_cost_get
    if _newclass:
        cost = _swig_property(_libsumo.TraCIStage_cost_get, _libsumo.TraCIStage_cost_set)
    __swig_setmethods__["intended"] = _libsumo.TraCIStage_intended_set
    __swig_getmethods__["intended"] = _libsumo.TraCIStage_intended_get
    if _newclass:
        intended = _swig_property(_libsumo.TraCIStage_intended_get, _libsumo.TraCIStage_intended_set)
    __swig_setmethods__["depart"] = _libsumo.TraCIStage_depart_set
    __swig_getmethods__["depart"] = _libsumo.TraCIStage_depart_get
    if _newclass:
        depart = _swig_property(_libsumo.TraCIStage_depart_get, _libsumo.TraCIStage_depart_set)
    __swig_destroy__ = _libsumo.delete_TraCIStage
    __del__ = lambda self: None
TraCIStage_swigregister = _libsumo.TraCIStage_swigregister
TraCIStage_swigregister(TraCIStage)

class edge(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, edge, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, edge, name)
    __repr__ = _swig_repr
    __swig_getmethods__["getIDList"] = lambda x: _libsumo.edge_getIDList
    if _newclass:
        getIDList = staticmethod(_libsumo.edge_getIDList)
    __swig_getmethods__["getIDCount"] = lambda x: _libsumo.edge_getIDCount
    if _newclass:
        getIDCount = staticmethod(_libsumo.edge_getIDCount)
    __swig_getmethods__["getAdaptedTraveltime"] = lambda x: _libsumo.edge_getAdaptedTraveltime
    if _newclass:
        getAdaptedTraveltime = staticmethod(_libsumo.edge_getAdaptedTraveltime)
    __swig_getmethods__["getEffort"] = lambda x: _libsumo.edge_getEffort
    if _newclass:
        getEffort = staticmethod(_libsumo.edge_getEffort)
    __swig_getmethods__["getTraveltime"] = lambda x: _libsumo.edge_getTraveltime
    if _newclass:
        getTraveltime = staticmethod(_libsumo.edge_getTraveltime)
    __swig_getmethods__["getWaitingTime"] = lambda x: _libsumo.edge_getWaitingTime
    if _newclass:
        getWaitingTime = staticmethod(_libsumo.edge_getWaitingTime)
    __swig_getmethods__["getLastStepPersonIDs"] = lambda x: _libsumo.edge_getLastStepPersonIDs
    if _newclass:
        getLastStepPersonIDs = staticmethod(_libsumo.edge_getLastStepPersonIDs)
    __swig_getmethods__["getLastStepVehicleIDs"] = lambda x: _libsumo.edge_getLastStepVehicleIDs
    if _newclass:
        getLastStepVehicleIDs = staticmethod(_libsumo.edge_getLastStepVehicleIDs)
    __swig_getmethods__["getCO2Emission"] = lambda x: _libsumo.edge_getCO2Emission
    if _newclass:
        getCO2Emission = staticmethod(_libsumo.edge_getCO2Emission)
    __swig_getmethods__["getCOEmission"] = lambda x: _libsumo.edge_getCOEmission
    if _newclass:
        getCOEmission = staticmethod(_libsumo.edge_getCOEmission)
    __swig_getmethods__["getHCEmission"] = lambda x: _libsumo.edge_getHCEmission
    if _newclass:
        getHCEmission = staticmethod(_libsumo.edge_getHCEmission)
    __swig_getmethods__["getPMxEmission"] = lambda x: _libsumo.edge_getPMxEmission
    if _newclass:
        getPMxEmission = staticmethod(_libsumo.edge_getPMxEmission)
    __swig_getmethods__["getNOxEmission"] = lambda x: _libsumo.edge_getNOxEmission
    if _newclass:
        getNOxEmission = staticmethod(_libsumo.edge_getNOxEmission)
    __swig_getmethods__["getFuelConsumption"] = lambda x: _libsumo.edge_getFuelConsumption
    if _newclass:
        getFuelConsumption = staticmethod(_libsumo.edge_getFuelConsumption)
    __swig_getmethods__["getNoiseEmission"] = lambda x: _libsumo.edge_getNoiseEmission
    if _newclass:
        getNoiseEmission = staticmethod(_libsumo.edge_getNoiseEmission)
    __swig_getmethods__["getElectricityConsumption"] = lambda x: _libsumo.edge_getElectricityConsumption
    if _newclass:
        getElectricityConsumption = staticmethod(_libsumo.edge_getElectricityConsumption)
    __swig_getmethods__["getLastStepVehicleNumber"] = lambda x: _libsumo.edge_getLastStepVehicleNumber
    if _newclass:
        getLastStepVehicleNumber = staticmethod(_libsumo.edge_getLastStepVehicleNumber)
    __swig_getmethods__["getLastStepMeanSpeed"] = lambda x: _libsumo.edge_getLastStepMeanSpeed
    if _newclass:
        getLastStepMeanSpeed = staticmethod(_libsumo.edge_getLastStepMeanSpeed)
    __swig_getmethods__["getLastStepOccupancy"] = lambda x: _libsumo.edge_getLastStepOccupancy
    if _newclass:
        getLastStepOccupancy = staticmethod(_libsumo.edge_getLastStepOccupancy)
    __swig_getmethods__["getLastStepHaltingNumber"] = lambda x: _libsumo.edge_getLastStepHaltingNumber
    if _newclass:
        getLastStepHaltingNumber = staticmethod(_libsumo.edge_getLastStepHaltingNumber)
    __swig_getmethods__["getLastStepLength"] = lambda x: _libsumo.edge_getLastStepLength
    if _newclass:
        getLastStepLength = staticmethod(_libsumo.edge_getLastStepLength)
    __swig_getmethods__["getLaneNumber"] = lambda x: _libsumo.edge_getLaneNumber
    if _newclass:
        getLaneNumber = staticmethod(_libsumo.edge_getLaneNumber)
    __swig_getmethods__["getParameter"] = lambda x: _libsumo.edge_getParameter
    if _newclass:
        getParameter = staticmethod(_libsumo.edge_getParameter)
    __swig_getmethods__["setAllowedVehicleClasses"] = lambda x: _libsumo.edge_setAllowedVehicleClasses
    if _newclass:
        setAllowedVehicleClasses = staticmethod(_libsumo.edge_setAllowedVehicleClasses)
    __swig_getmethods__["setDisallowedVehicleClasses"] = lambda x: _libsumo.edge_setDisallowedVehicleClasses
    if _newclass:
        setDisallowedVehicleClasses = staticmethod(_libsumo.edge_setDisallowedVehicleClasses)
    __swig_getmethods__["setAllowedSVCPermissions"] = lambda x: _libsumo.edge_setAllowedSVCPermissions
    if _newclass:
        setAllowedSVCPermissions = staticmethod(_libsumo.edge_setAllowedSVCPermissions)
    __swig_getmethods__["adaptTraveltime"] = lambda x: _libsumo.edge_adaptTraveltime
    if _newclass:
        adaptTraveltime = staticmethod(_libsumo.edge_adaptTraveltime)
    __swig_getmethods__["setEffort"] = lambda x: _libsumo.edge_setEffort
    if _newclass:
        setEffort = staticmethod(_libsumo.edge_setEffort)
    __swig_getmethods__["setMaxSpeed"] = lambda x: _libsumo.edge_setMaxSpeed
    if _newclass:
        setMaxSpeed = staticmethod(_libsumo.edge_setMaxSpeed)
    __swig_getmethods__["setParameter"] = lambda x: _libsumo.edge_setParameter
    if _newclass:
        setParameter = staticmethod(_libsumo.edge_setParameter)
    __swig_getmethods__["subscribe"] = lambda x: _libsumo.edge_subscribe
    if _newclass:
        subscribe = staticmethod(_libsumo.edge_subscribe)
    __swig_getmethods__["subscribeContext"] = lambda x: _libsumo.edge_subscribeContext
    if _newclass:
        subscribeContext = staticmethod(_libsumo.edge_subscribeContext)
    __swig_getmethods__["getSubscriptionResults"] = lambda x: _libsumo.edge_getSubscriptionResults
    if _newclass:
        getSubscriptionResults = staticmethod(_libsumo.edge_getSubscriptionResults)
    __swig_getmethods__["getContextSubscriptionResults"] = lambda x: _libsumo.edge_getContextSubscriptionResults
    if _newclass:
        getContextSubscriptionResults = staticmethod(_libsumo.edge_getContextSubscriptionResults)

    def __init__(self):
        this = _libsumo.new_edge()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _libsumo.delete_edge
    __del__ = lambda self: None
edge_swigregister = _libsumo.edge_swigregister
edge_swigregister(edge)

def edge_getIDList():
    return _libsumo.edge_getIDList()
edge_getIDList = _libsumo.edge_getIDList

def edge_getIDCount():
    return _libsumo.edge_getIDCount()
edge_getIDCount = _libsumo.edge_getIDCount

def edge_getAdaptedTraveltime(id, time):
    return _libsumo.edge_getAdaptedTraveltime(id, time)
edge_getAdaptedTraveltime = _libsumo.edge_getAdaptedTraveltime

def edge_getEffort(id, time):
    return _libsumo.edge_getEffort(id, time)
edge_getEffort = _libsumo.edge_getEffort

def edge_getTraveltime(id):
    return _libsumo.edge_getTraveltime(id)
edge_getTraveltime = _libsumo.edge_getTraveltime

def edge_getWaitingTime(id):
    return _libsumo.edge_getWaitingTime(id)
edge_getWaitingTime = _libsumo.edge_getWaitingTime

def edge_getLastStepPersonIDs(id):
    return _libsumo.edge_getLastStepPersonIDs(id)
edge_getLastStepPersonIDs = _libsumo.edge_getLastStepPersonIDs

def edge_getLastStepVehicleIDs(id):
    return _libsumo.edge_getLastStepVehicleIDs(id)
edge_getLastStepVehicleIDs = _libsumo.edge_getLastStepVehicleIDs

def edge_getCO2Emission(id):
    return _libsumo.edge_getCO2Emission(id)
edge_getCO2Emission = _libsumo.edge_getCO2Emission

def edge_getCOEmission(id):
    return _libsumo.edge_getCOEmission(id)
edge_getCOEmission = _libsumo.edge_getCOEmission

def edge_getHCEmission(id):
    return _libsumo.edge_getHCEmission(id)
edge_getHCEmission = _libsumo.edge_getHCEmission

def edge_getPMxEmission(id):
    return _libsumo.edge_getPMxEmission(id)
edge_getPMxEmission = _libsumo.edge_getPMxEmission

def edge_getNOxEmission(id):
    return _libsumo.edge_getNOxEmission(id)
edge_getNOxEmission = _libsumo.edge_getNOxEmission

def edge_getFuelConsumption(id):
    return _libsumo.edge_getFuelConsumption(id)
edge_getFuelConsumption = _libsumo.edge_getFuelConsumption

def edge_getNoiseEmission(id):
    return _libsumo.edge_getNoiseEmission(id)
edge_getNoiseEmission = _libsumo.edge_getNoiseEmission

def edge_getElectricityConsumption(id):
    return _libsumo.edge_getElectricityConsumption(id)
edge_getElectricityConsumption = _libsumo.edge_getElectricityConsumption

def edge_getLastStepVehicleNumber(id):
    return _libsumo.edge_getLastStepVehicleNumber(id)
edge_getLastStepVehicleNumber = _libsumo.edge_getLastStepVehicleNumber

def edge_getLastStepMeanSpeed(id):
    return _libsumo.edge_getLastStepMeanSpeed(id)
edge_getLastStepMeanSpeed = _libsumo.edge_getLastStepMeanSpeed

def edge_getLastStepOccupancy(id):
    return _libsumo.edge_getLastStepOccupancy(id)
edge_getLastStepOccupancy = _libsumo.edge_getLastStepOccupancy

def edge_getLastStepHaltingNumber(id):
    return _libsumo.edge_getLastStepHaltingNumber(id)
edge_getLastStepHaltingNumber = _libsumo.edge_getLastStepHaltingNumber

def edge_getLastStepLength(id):
    return _libsumo.edge_getLastStepLength(id)
edge_getLastStepLength = _libsumo.edge_getLastStepLength

def edge_getLaneNumber(id):
    return _libsumo.edge_getLaneNumber(id)
edge_getLaneNumber = _libsumo.edge_getLaneNumber

def edge_getParameter(id, paramName):
    return _libsumo.edge_getParameter(id, paramName)
edge_getParameter = _libsumo.edge_getParameter

def edge_setAllowedVehicleClasses(id, vector):
    return _libsumo.edge_setAllowedVehicleClasses(id, vector)
edge_setAllowedVehicleClasses = _libsumo.edge_setAllowedVehicleClasses

def edge_setDisallowedVehicleClasses(id, classes):
    return _libsumo.edge_setDisallowedVehicleClasses(id, classes)
edge_setDisallowedVehicleClasses = _libsumo.edge_setDisallowedVehicleClasses

def edge_setAllowedSVCPermissions(id, permissions):
    return _libsumo.edge_setAllowedSVCPermissions(id, permissions)
edge_setAllowedSVCPermissions = _libsumo.edge_setAllowedSVCPermissions

def edge_adaptTraveltime(*args):
    return _libsumo.edge_adaptTraveltime(*args)
edge_adaptTraveltime = _libsumo.edge_adaptTraveltime

def edge_setEffort(*args):
    return _libsumo.edge_setEffort(*args)
edge_setEffort = _libsumo.edge_setEffort

def edge_setMaxSpeed(id, value):
    return _libsumo.edge_setMaxSpeed(id, value)
edge_setMaxSpeed = _libsumo.edge_setMaxSpeed

def edge_setParameter(id, name, value):
    return _libsumo.edge_setParameter(id, name, value)
edge_setParameter = _libsumo.edge_setParameter

def edge_subscribe(objID, vars, beginTime, endTime):
    return _libsumo.edge_subscribe(objID, vars, beginTime, endTime)
edge_subscribe = _libsumo.edge_subscribe

def edge_subscribeContext(objID, domain, range, vars, beginTime, endTime):
    return _libsumo.edge_subscribeContext(objID, domain, range, vars, beginTime, endTime)
edge_subscribeContext = _libsumo.edge_subscribeContext

def edge_getSubscriptionResults(*args):
    return _libsumo.edge_getSubscriptionResults(*args)
edge_getSubscriptionResults = _libsumo.edge_getSubscriptionResults

def edge_getContextSubscriptionResults(*args):
    return _libsumo.edge_getContextSubscriptionResults(*args)
edge_getContextSubscriptionResults = _libsumo.edge_getContextSubscriptionResults

class inductionloop(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, inductionloop, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, inductionloop, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["getIDList"] = lambda x: _libsumo.inductionloop_getIDList
    if _newclass:
        getIDList = staticmethod(_libsumo.inductionloop_getIDList)
    __swig_getmethods__["getIDCount"] = lambda x: _libsumo.inductionloop_getIDCount
    if _newclass:
        getIDCount = staticmethod(_libsumo.inductionloop_getIDCount)
    __swig_getmethods__["getPosition"] = lambda x: _libsumo.inductionloop_getPosition
    if _newclass:
        getPosition = staticmethod(_libsumo.inductionloop_getPosition)
    __swig_getmethods__["getLaneID"] = lambda x: _libsumo.inductionloop_getLaneID
    if _newclass:
        getLaneID = staticmethod(_libsumo.inductionloop_getLaneID)
    __swig_getmethods__["getLastStepVehicleNumber"] = lambda x: _libsumo.inductionloop_getLastStepVehicleNumber
    if _newclass:
        getLastStepVehicleNumber = staticmethod(_libsumo.inductionloop_getLastStepVehicleNumber)
    __swig_getmethods__["getLastStepMeanSpeed"] = lambda x: _libsumo.inductionloop_getLastStepMeanSpeed
    if _newclass:
        getLastStepMeanSpeed = staticmethod(_libsumo.inductionloop_getLastStepMeanSpeed)
    __swig_getmethods__["getLastStepVehicleIDs"] = lambda x: _libsumo.inductionloop_getLastStepVehicleIDs
    if _newclass:
        getLastStepVehicleIDs = staticmethod(_libsumo.inductionloop_getLastStepVehicleIDs)
    __swig_getmethods__["getLastStepOccupancy"] = lambda x: _libsumo.inductionloop_getLastStepOccupancy
    if _newclass:
        getLastStepOccupancy = staticmethod(_libsumo.inductionloop_getLastStepOccupancy)
    __swig_getmethods__["getLastStepMeanLength"] = lambda x: _libsumo.inductionloop_getLastStepMeanLength
    if _newclass:
        getLastStepMeanLength = staticmethod(_libsumo.inductionloop_getLastStepMeanLength)
    __swig_getmethods__["getTimeSinceDetection"] = lambda x: _libsumo.inductionloop_getTimeSinceDetection
    if _newclass:
        getTimeSinceDetection = staticmethod(_libsumo.inductionloop_getTimeSinceDetection)
    __swig_getmethods__["getVehicleData"] = lambda x: _libsumo.inductionloop_getVehicleData
    if _newclass:
        getVehicleData = staticmethod(_libsumo.inductionloop_getVehicleData)
    __swig_getmethods__["getTree"] = lambda x: _libsumo.inductionloop_getTree
    if _newclass:
        getTree = staticmethod(_libsumo.inductionloop_getTree)
    __swig_destroy__ = _libsumo.delete_inductionloop
    __del__ = lambda self: None
inductionloop_swigregister = _libsumo.inductionloop_swigregister
inductionloop_swigregister(inductionloop)

def inductionloop_getIDList():
    return _libsumo.inductionloop_getIDList()
inductionloop_getIDList = _libsumo.inductionloop_getIDList

def inductionloop_getIDCount():
    return _libsumo.inductionloop_getIDCount()
inductionloop_getIDCount = _libsumo.inductionloop_getIDCount

def inductionloop_getPosition(detID):
    return _libsumo.inductionloop_getPosition(detID)
inductionloop_getPosition = _libsumo.inductionloop_getPosition

def inductionloop_getLaneID(detID):
    return _libsumo.inductionloop_getLaneID(detID)
inductionloop_getLaneID = _libsumo.inductionloop_getLaneID

def inductionloop_getLastStepVehicleNumber(detID):
    return _libsumo.inductionloop_getLastStepVehicleNumber(detID)
inductionloop_getLastStepVehicleNumber = _libsumo.inductionloop_getLastStepVehicleNumber

def inductionloop_getLastStepMeanSpeed(detID):
    return _libsumo.inductionloop_getLastStepMeanSpeed(detID)
inductionloop_getLastStepMeanSpeed = _libsumo.inductionloop_getLastStepMeanSpeed

def inductionloop_getLastStepVehicleIDs(detID):
    return _libsumo.inductionloop_getLastStepVehicleIDs(detID)
inductionloop_getLastStepVehicleIDs = _libsumo.inductionloop_getLastStepVehicleIDs

def inductionloop_getLastStepOccupancy(detID):
    return _libsumo.inductionloop_getLastStepOccupancy(detID)
inductionloop_getLastStepOccupancy = _libsumo.inductionloop_getLastStepOccupancy

def inductionloop_getLastStepMeanLength(detID):
    return _libsumo.inductionloop_getLastStepMeanLength(detID)
inductionloop_getLastStepMeanLength = _libsumo.inductionloop_getLastStepMeanLength

def inductionloop_getTimeSinceDetection(detID):
    return _libsumo.inductionloop_getTimeSinceDetection(detID)
inductionloop_getTimeSinceDetection = _libsumo.inductionloop_getTimeSinceDetection

def inductionloop_getVehicleData(detID):
    return _libsumo.inductionloop_getVehicleData(detID)
inductionloop_getVehicleData = _libsumo.inductionloop_getVehicleData

def inductionloop_getTree():
    return _libsumo.inductionloop_getTree()
inductionloop_getTree = _libsumo.inductionloop_getTree

class junction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, junction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, junction, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["getIDList"] = lambda x: _libsumo.junction_getIDList
    if _newclass:
        getIDList = staticmethod(_libsumo.junction_getIDList)
    __swig_getmethods__["getIDCount"] = lambda x: _libsumo.junction_getIDCount
    if _newclass:
        getIDCount = staticmethod(_libsumo.junction_getIDCount)
    __swig_getmethods__["getPosition"] = lambda x: _libsumo.junction_getPosition
    if _newclass:
        getPosition = staticmethod(_libsumo.junction_getPosition)
    __swig_getmethods__["getShape"] = lambda x: _libsumo.junction_getShape
    if _newclass:
        getShape = staticmethod(_libsumo.junction_getShape)
    __swig_getmethods__["getTree"] = lambda x: _libsumo.junction_getTree
    if _newclass:
        getTree = staticmethod(_libsumo.junction_getTree)
    __swig_destroy__ = _libsumo.delete_junction
    __del__ = lambda self: None
junction_swigregister = _libsumo.junction_swigregister
junction_swigregister(junction)

def junction_getIDList():
    return _libsumo.junction_getIDList()
junction_getIDList = _libsumo.junction_getIDList

def junction_getIDCount():
    return _libsumo.junction_getIDCount()
junction_getIDCount = _libsumo.junction_getIDCount

def junction_getPosition(junctionID):
    return _libsumo.junction_getPosition(junctionID)
junction_getPosition = _libsumo.junction_getPosition

def junction_getShape(junctionID):
    return _libsumo.junction_getShape(junctionID)
junction_getShape = _libsumo.junction_getShape

def junction_getTree():
    return _libsumo.junction_getTree()
junction_getTree = _libsumo.junction_getTree

class lanearea(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lanearea, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lanearea, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["getIDList"] = lambda x: _libsumo.lanearea_getIDList
    if _newclass:
        getIDList = staticmethod(_libsumo.lanearea_getIDList)
    __swig_getmethods__["getIDCount"] = lambda x: _libsumo.lanearea_getIDCount
    if _newclass:
        getIDCount = staticmethod(_libsumo.lanearea_getIDCount)
    __swig_getmethods__["getJamLengthVehicle"] = lambda x: _libsumo.lanearea_getJamLengthVehicle
    if _newclass:
        getJamLengthVehicle = staticmethod(_libsumo.lanearea_getJamLengthVehicle)
    __swig_getmethods__["getJamLengthMeters"] = lambda x: _libsumo.lanearea_getJamLengthMeters
    if _newclass:
        getJamLengthMeters = staticmethod(_libsumo.lanearea_getJamLengthMeters)
    __swig_getmethods__["getLastStepMeanSpeed"] = lambda x: _libsumo.lanearea_getLastStepMeanSpeed
    if _newclass:
        getLastStepMeanSpeed = staticmethod(_libsumo.lanearea_getLastStepMeanSpeed)
    __swig_getmethods__["getLastStepVehicleIDs"] = lambda x: _libsumo.lanearea_getLastStepVehicleIDs
    if _newclass:
        getLastStepVehicleIDs = staticmethod(_libsumo.lanearea_getLastStepVehicleIDs)
    __swig_getmethods__["getLastStepOccupancy"] = lambda x: _libsumo.lanearea_getLastStepOccupancy
    if _newclass:
        getLastStepOccupancy = staticmethod(_libsumo.lanearea_getLastStepOccupancy)
    __swig_getmethods__["getPosition"] = lambda x: _libsumo.lanearea_getPosition
    if _newclass:
        getPosition = staticmethod(_libsumo.lanearea_getPosition)
    __swig_getmethods__["getLaneID"] = lambda x: _libsumo.lanearea_getLaneID
    if _newclass:
        getLaneID = staticmethod(_libsumo.lanearea_getLaneID)
    __swig_getmethods__["getLength"] = lambda x: _libsumo.lanearea_getLength
    if _newclass:
        getLength = staticmethod(_libsumo.lanearea_getLength)
    __swig_getmethods__["getLastStepVehicleNumber"] = lambda x: _libsumo.lanearea_getLastStepVehicleNumber
    if _newclass:
        getLastStepVehicleNumber = staticmethod(_libsumo.lanearea_getLastStepVehicleNumber)
    __swig_getmethods__["getLastStepHaltingNumber"] = lambda x: _libsumo.lanearea_getLastStepHaltingNumber
    if _newclass:
        getLastStepHaltingNumber = staticmethod(_libsumo.lanearea_getLastStepHaltingNumber)
    __swig_destroy__ = _libsumo.delete_lanearea
    __del__ = lambda self: None
lanearea_swigregister = _libsumo.lanearea_swigregister
lanearea_swigregister(lanearea)

def lanearea_getIDList():
    return _libsumo.lanearea_getIDList()
lanearea_getIDList = _libsumo.lanearea_getIDList

def lanearea_getIDCount():
    return _libsumo.lanearea_getIDCount()
lanearea_getIDCount = _libsumo.lanearea_getIDCount

def lanearea_getJamLengthVehicle(detID):
    return _libsumo.lanearea_getJamLengthVehicle(detID)
lanearea_getJamLengthVehicle = _libsumo.lanearea_getJamLengthVehicle

def lanearea_getJamLengthMeters(detID):
    return _libsumo.lanearea_getJamLengthMeters(detID)
lanearea_getJamLengthMeters = _libsumo.lanearea_getJamLengthMeters

def lanearea_getLastStepMeanSpeed(detID):
    return _libsumo.lanearea_getLastStepMeanSpeed(detID)
lanearea_getLastStepMeanSpeed = _libsumo.lanearea_getLastStepMeanSpeed

def lanearea_getLastStepVehicleIDs(detID):
    return _libsumo.lanearea_getLastStepVehicleIDs(detID)
lanearea_getLastStepVehicleIDs = _libsumo.lanearea_getLastStepVehicleIDs

def lanearea_getLastStepOccupancy(detID):
    return _libsumo.lanearea_getLastStepOccupancy(detID)
lanearea_getLastStepOccupancy = _libsumo.lanearea_getLastStepOccupancy

def lanearea_getPosition(detID):
    return _libsumo.lanearea_getPosition(detID)
lanearea_getPosition = _libsumo.lanearea_getPosition

def lanearea_getLaneID(detID):
    return _libsumo.lanearea_getLaneID(detID)
lanearea_getLaneID = _libsumo.lanearea_getLaneID

def lanearea_getLength(detID):
    return _libsumo.lanearea_getLength(detID)
lanearea_getLength = _libsumo.lanearea_getLength

def lanearea_getLastStepVehicleNumber(detID):
    return _libsumo.lanearea_getLastStepVehicleNumber(detID)
lanearea_getLastStepVehicleNumber = _libsumo.lanearea_getLastStepVehicleNumber

def lanearea_getLastStepHaltingNumber(detID):
    return _libsumo.lanearea_getLastStepHaltingNumber(detID)
lanearea_getLastStepHaltingNumber = _libsumo.lanearea_getLastStepHaltingNumber

class lane(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lane, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lane, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["getIDList"] = lambda x: _libsumo.lane_getIDList
    if _newclass:
        getIDList = staticmethod(_libsumo.lane_getIDList)
    __swig_getmethods__["getIDCount"] = lambda x: _libsumo.lane_getIDCount
    if _newclass:
        getIDCount = staticmethod(_libsumo.lane_getIDCount)
    __swig_getmethods__["getLinkNumber"] = lambda x: _libsumo.lane_getLinkNumber
    if _newclass:
        getLinkNumber = staticmethod(_libsumo.lane_getLinkNumber)
    __swig_getmethods__["getEdgeID"] = lambda x: _libsumo.lane_getEdgeID
    if _newclass:
        getEdgeID = staticmethod(_libsumo.lane_getEdgeID)
    __swig_getmethods__["getLength"] = lambda x: _libsumo.lane_getLength
    if _newclass:
        getLength = staticmethod(_libsumo.lane_getLength)
    __swig_getmethods__["getMaxSpeed"] = lambda x: _libsumo.lane_getMaxSpeed
    if _newclass:
        getMaxSpeed = staticmethod(_libsumo.lane_getMaxSpeed)
    __swig_getmethods__["getAllowed"] = lambda x: _libsumo.lane_getAllowed
    if _newclass:
        getAllowed = staticmethod(_libsumo.lane_getAllowed)
    __swig_getmethods__["getDisallowed"] = lambda x: _libsumo.lane_getDisallowed
    if _newclass:
        getDisallowed = staticmethod(_libsumo.lane_getDisallowed)
    __swig_getmethods__["getLinks"] = lambda x: _libsumo.lane_getLinks
    if _newclass:
        getLinks = staticmethod(_libsumo.lane_getLinks)
    __swig_getmethods__["getShape"] = lambda x: _libsumo.lane_getShape
    if _newclass:
        getShape = staticmethod(_libsumo.lane_getShape)
    __swig_getmethods__["getWidth"] = lambda x: _libsumo.lane_getWidth
    if _newclass:
        getWidth = staticmethod(_libsumo.lane_getWidth)
    __swig_getmethods__["getCO2Emission"] = lambda x: _libsumo.lane_getCO2Emission
    if _newclass:
        getCO2Emission = staticmethod(_libsumo.lane_getCO2Emission)
    __swig_getmethods__["getCOEmission"] = lambda x: _libsumo.lane_getCOEmission
    if _newclass:
        getCOEmission = staticmethod(_libsumo.lane_getCOEmission)
    __swig_getmethods__["getHCEmission"] = lambda x: _libsumo.lane_getHCEmission
    if _newclass:
        getHCEmission = staticmethod(_libsumo.lane_getHCEmission)
    __swig_getmethods__["getPMxEmission"] = lambda x: _libsumo.lane_getPMxEmission
    if _newclass:
        getPMxEmission = staticmethod(_libsumo.lane_getPMxEmission)
    __swig_getmethods__["getNOxEmission"] = lambda x: _libsumo.lane_getNOxEmission
    if _newclass:
        getNOxEmission = staticmethod(_libsumo.lane_getNOxEmission)
    __swig_getmethods__["getFuelConsumption"] = lambda x: _libsumo.lane_getFuelConsumption
    if _newclass:
        getFuelConsumption = staticmethod(_libsumo.lane_getFuelConsumption)
    __swig_getmethods__["getNoiseEmission"] = lambda x: _libsumo.lane_getNoiseEmission
    if _newclass:
        getNoiseEmission = staticmethod(_libsumo.lane_getNoiseEmission)
    __swig_getmethods__["getElectricityConsumption"] = lambda x: _libsumo.lane_getElectricityConsumption
    if _newclass:
        getElectricityConsumption = staticmethod(_libsumo.lane_getElectricityConsumption)
    __swig_getmethods__["getLastStepMeanSpeed"] = lambda x: _libsumo.lane_getLastStepMeanSpeed
    if _newclass:
        getLastStepMeanSpeed = staticmethod(_libsumo.lane_getLastStepMeanSpeed)
    __swig_getmethods__["getLastStepOccupancy"] = lambda x: _libsumo.lane_getLastStepOccupancy
    if _newclass:
        getLastStepOccupancy = staticmethod(_libsumo.lane_getLastStepOccupancy)
    __swig_getmethods__["getLastStepLength"] = lambda x: _libsumo.lane_getLastStepLength
    if _newclass:
        getLastStepLength = staticmethod(_libsumo.lane_getLastStepLength)
    __swig_getmethods__["getWaitingTime"] = lambda x: _libsumo.lane_getWaitingTime
    if _newclass:
        getWaitingTime = staticmethod(_libsumo.lane_getWaitingTime)
    __swig_getmethods__["getTraveltime"] = lambda x: _libsumo.lane_getTraveltime
    if _newclass:
        getTraveltime = staticmethod(_libsumo.lane_getTraveltime)
    __swig_getmethods__["getLastStepVehicleNumber"] = lambda x: _libsumo.lane_getLastStepVehicleNumber
    if _newclass:
        getLastStepVehicleNumber = staticmethod(_libsumo.lane_getLastStepVehicleNumber)
    __swig_getmethods__["getLastStepHaltingNumber"] = lambda x: _libsumo.lane_getLastStepHaltingNumber
    if _newclass:
        getLastStepHaltingNumber = staticmethod(_libsumo.lane_getLastStepHaltingNumber)
    __swig_getmethods__["getLastStepVehicleIDs"] = lambda x: _libsumo.lane_getLastStepVehicleIDs
    if _newclass:
        getLastStepVehicleIDs = staticmethod(_libsumo.lane_getLastStepVehicleIDs)
    __swig_getmethods__["getFoes"] = lambda x: _libsumo.lane_getFoes
    if _newclass:
        getFoes = staticmethod(_libsumo.lane_getFoes)
    __swig_getmethods__["getInternalFoes"] = lambda x: _libsumo.lane_getInternalFoes
    if _newclass:
        getInternalFoes = staticmethod(_libsumo.lane_getInternalFoes)
    __swig_getmethods__["setAllowed"] = lambda x: _libsumo.lane_setAllowed
    if _newclass:
        setAllowed = staticmethod(_libsumo.lane_setAllowed)
    __swig_getmethods__["setDisallowed"] = lambda x: _libsumo.lane_setDisallowed
    if _newclass:
        setDisallowed = staticmethod(_libsumo.lane_setDisallowed)
    __swig_getmethods__["setMaxSpeed"] = lambda x: _libsumo.lane_setMaxSpeed
    if _newclass:
        setMaxSpeed = staticmethod(_libsumo.lane_setMaxSpeed)
    __swig_getmethods__["setLength"] = lambda x: _libsumo.lane_setLength
    if _newclass:
        setLength = staticmethod(_libsumo.lane_setLength)
    __swig_getmethods__["getParameter"] = lambda x: _libsumo.lane_getParameter
    if _newclass:
        getParameter = staticmethod(_libsumo.lane_getParameter)
    __swig_getmethods__["setParameter"] = lambda x: _libsumo.lane_setParameter
    if _newclass:
        setParameter = staticmethod(_libsumo.lane_setParameter)
    __swig_destroy__ = _libsumo.delete_lane
    __del__ = lambda self: None
lane_swigregister = _libsumo.lane_swigregister
lane_swigregister(lane)

def lane_getIDList():
    return _libsumo.lane_getIDList()
lane_getIDList = _libsumo.lane_getIDList

def lane_getIDCount():
    return _libsumo.lane_getIDCount()
lane_getIDCount = _libsumo.lane_getIDCount

def lane_getLinkNumber(laneID):
    return _libsumo.lane_getLinkNumber(laneID)
lane_getLinkNumber = _libsumo.lane_getLinkNumber

def lane_getEdgeID(laneID):
    return _libsumo.lane_getEdgeID(laneID)
lane_getEdgeID = _libsumo.lane_getEdgeID

def lane_getLength(laneID):
    return _libsumo.lane_getLength(laneID)
lane_getLength = _libsumo.lane_getLength

def lane_getMaxSpeed(laneID):
    return _libsumo.lane_getMaxSpeed(laneID)
lane_getMaxSpeed = _libsumo.lane_getMaxSpeed

def lane_getAllowed(laneID):
    return _libsumo.lane_getAllowed(laneID)
lane_getAllowed = _libsumo.lane_getAllowed

def lane_getDisallowed(laneID):
    return _libsumo.lane_getDisallowed(laneID)
lane_getDisallowed = _libsumo.lane_getDisallowed

def lane_getLinks(laneID):
    return _libsumo.lane_getLinks(laneID)
lane_getLinks = _libsumo.lane_getLinks

def lane_getShape(laneID):
    return _libsumo.lane_getShape(laneID)
lane_getShape = _libsumo.lane_getShape

def lane_getWidth(laneID):
    return _libsumo.lane_getWidth(laneID)
lane_getWidth = _libsumo.lane_getWidth

def lane_getCO2Emission(laneID):
    return _libsumo.lane_getCO2Emission(laneID)
lane_getCO2Emission = _libsumo.lane_getCO2Emission

def lane_getCOEmission(laneID):
    return _libsumo.lane_getCOEmission(laneID)
lane_getCOEmission = _libsumo.lane_getCOEmission

def lane_getHCEmission(laneID):
    return _libsumo.lane_getHCEmission(laneID)
lane_getHCEmission = _libsumo.lane_getHCEmission

def lane_getPMxEmission(laneID):
    return _libsumo.lane_getPMxEmission(laneID)
lane_getPMxEmission = _libsumo.lane_getPMxEmission

def lane_getNOxEmission(laneID):
    return _libsumo.lane_getNOxEmission(laneID)
lane_getNOxEmission = _libsumo.lane_getNOxEmission

def lane_getFuelConsumption(laneID):
    return _libsumo.lane_getFuelConsumption(laneID)
lane_getFuelConsumption = _libsumo.lane_getFuelConsumption

def lane_getNoiseEmission(laneID):
    return _libsumo.lane_getNoiseEmission(laneID)
lane_getNoiseEmission = _libsumo.lane_getNoiseEmission

def lane_getElectricityConsumption(laneID):
    return _libsumo.lane_getElectricityConsumption(laneID)
lane_getElectricityConsumption = _libsumo.lane_getElectricityConsumption

def lane_getLastStepMeanSpeed(laneID):
    return _libsumo.lane_getLastStepMeanSpeed(laneID)
lane_getLastStepMeanSpeed = _libsumo.lane_getLastStepMeanSpeed

def lane_getLastStepOccupancy(laneID):
    return _libsumo.lane_getLastStepOccupancy(laneID)
lane_getLastStepOccupancy = _libsumo.lane_getLastStepOccupancy

def lane_getLastStepLength(laneID):
    return _libsumo.lane_getLastStepLength(laneID)
lane_getLastStepLength = _libsumo.lane_getLastStepLength

def lane_getWaitingTime(laneID):
    return _libsumo.lane_getWaitingTime(laneID)
lane_getWaitingTime = _libsumo.lane_getWaitingTime

def lane_getTraveltime(laneID):
    return _libsumo.lane_getTraveltime(laneID)
lane_getTraveltime = _libsumo.lane_getTraveltime

def lane_getLastStepVehicleNumber(laneID):
    return _libsumo.lane_getLastStepVehicleNumber(laneID)
lane_getLastStepVehicleNumber = _libsumo.lane_getLastStepVehicleNumber

def lane_getLastStepHaltingNumber(laneID):
    return _libsumo.lane_getLastStepHaltingNumber(laneID)
lane_getLastStepHaltingNumber = _libsumo.lane_getLastStepHaltingNumber

def lane_getLastStepVehicleIDs(laneID):
    return _libsumo.lane_getLastStepVehicleIDs(laneID)
lane_getLastStepVehicleIDs = _libsumo.lane_getLastStepVehicleIDs

def lane_getFoes(laneID, toLaneID):
    return _libsumo.lane_getFoes(laneID, toLaneID)
lane_getFoes = _libsumo.lane_getFoes

def lane_getInternalFoes(laneID):
    return _libsumo.lane_getInternalFoes(laneID)
lane_getInternalFoes = _libsumo.lane_getInternalFoes

def lane_setAllowed(laneID, allowedClasses):
    return _libsumo.lane_setAllowed(laneID, allowedClasses)
lane_setAllowed = _libsumo.lane_setAllowed

def lane_setDisallowed(laneID, disallowedClasses):
    return _libsumo.lane_setDisallowed(laneID, disallowedClasses)
lane_setDisallowed = _libsumo.lane_setDisallowed

def lane_setMaxSpeed(laneID, speed):
    return _libsumo.lane_setMaxSpeed(laneID, speed)
lane_setMaxSpeed = _libsumo.lane_setMaxSpeed

def lane_setLength(laneID, length):
    return _libsumo.lane_setLength(laneID, length)
lane_setLength = _libsumo.lane_setLength

def lane_getParameter(laneID, param):
    return _libsumo.lane_getParameter(laneID, param)
lane_getParameter = _libsumo.lane_getParameter

def lane_setParameter(routeID, key, value):
    return _libsumo.lane_setParameter(routeID, key, value)
lane_setParameter = _libsumo.lane_setParameter

class multientryexit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, multientryexit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, multientryexit, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["getIDList"] = lambda x: _libsumo.multientryexit_getIDList
    if _newclass:
        getIDList = staticmethod(_libsumo.multientryexit_getIDList)
    __swig_getmethods__["getIDCount"] = lambda x: _libsumo.multientryexit_getIDCount
    if _newclass:
        getIDCount = staticmethod(_libsumo.multientryexit_getIDCount)
    __swig_getmethods__["getLastStepVehicleNumber"] = lambda x: _libsumo.multientryexit_getLastStepVehicleNumber
    if _newclass:
        getLastStepVehicleNumber = staticmethod(_libsumo.multientryexit_getLastStepVehicleNumber)
    __swig_getmethods__["getLastStepMeanSpeed"] = lambda x: _libsumo.multientryexit_getLastStepMeanSpeed
    if _newclass:
        getLastStepMeanSpeed = staticmethod(_libsumo.multientryexit_getLastStepMeanSpeed)
    __swig_getmethods__["getLastStepVehicleIDs"] = lambda x: _libsumo.multientryexit_getLastStepVehicleIDs
    if _newclass:
        getLastStepVehicleIDs = staticmethod(_libsumo.multientryexit_getLastStepVehicleIDs)
    __swig_getmethods__["getLastStepHaltingNumber"] = lambda x: _libsumo.multientryexit_getLastStepHaltingNumber
    if _newclass:
        getLastStepHaltingNumber = staticmethod(_libsumo.multientryexit_getLastStepHaltingNumber)
    __swig_destroy__ = _libsumo.delete_multientryexit
    __del__ = lambda self: None
multientryexit_swigregister = _libsumo.multientryexit_swigregister
multientryexit_swigregister(multientryexit)

def multientryexit_getIDList():
    return _libsumo.multientryexit_getIDList()
multientryexit_getIDList = _libsumo.multientryexit_getIDList

def multientryexit_getIDCount():
    return _libsumo.multientryexit_getIDCount()
multientryexit_getIDCount = _libsumo.multientryexit_getIDCount

def multientryexit_getLastStepVehicleNumber(detID):
    return _libsumo.multientryexit_getLastStepVehicleNumber(detID)
multientryexit_getLastStepVehicleNumber = _libsumo.multientryexit_getLastStepVehicleNumber

def multientryexit_getLastStepMeanSpeed(detID):
    return _libsumo.multientryexit_getLastStepMeanSpeed(detID)
multientryexit_getLastStepMeanSpeed = _libsumo.multientryexit_getLastStepMeanSpeed

def multientryexit_getLastStepVehicleIDs(detID):
    return _libsumo.multientryexit_getLastStepVehicleIDs(detID)
multientryexit_getLastStepVehicleIDs = _libsumo.multientryexit_getLastStepVehicleIDs

def multientryexit_getLastStepHaltingNumber(detID):
    return _libsumo.multientryexit_getLastStepHaltingNumber(detID)
multientryexit_getLastStepHaltingNumber = _libsumo.multientryexit_getLastStepHaltingNumber

class person(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, person, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, person, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["getIDList"] = lambda x: _libsumo.person_getIDList
    if _newclass:
        getIDList = staticmethod(_libsumo.person_getIDList)
    __swig_getmethods__["getIDCount"] = lambda x: _libsumo.person_getIDCount
    if _newclass:
        getIDCount = staticmethod(_libsumo.person_getIDCount)
    __swig_getmethods__["getSpeed"] = lambda x: _libsumo.person_getSpeed
    if _newclass:
        getSpeed = staticmethod(_libsumo.person_getSpeed)
    __swig_getmethods__["getPosition"] = lambda x: _libsumo.person_getPosition
    if _newclass:
        getPosition = staticmethod(_libsumo.person_getPosition)
    __swig_getmethods__["getRoadID"] = lambda x: _libsumo.person_getRoadID
    if _newclass:
        getRoadID = staticmethod(_libsumo.person_getRoadID)
    __swig_getmethods__["getTypeID"] = lambda x: _libsumo.person_getTypeID
    if _newclass:
        getTypeID = staticmethod(_libsumo.person_getTypeID)
    __swig_getmethods__["getWaitingTime"] = lambda x: _libsumo.person_getWaitingTime
    if _newclass:
        getWaitingTime = staticmethod(_libsumo.person_getWaitingTime)
    __swig_getmethods__["getNextEdge"] = lambda x: _libsumo.person_getNextEdge
    if _newclass:
        getNextEdge = staticmethod(_libsumo.person_getNextEdge)
    __swig_getmethods__["getVehicle"] = lambda x: _libsumo.person_getVehicle
    if _newclass:
        getVehicle = staticmethod(_libsumo.person_getVehicle)
    __swig_getmethods__["getRemainingStages"] = lambda x: _libsumo.person_getRemainingStages
    if _newclass:
        getRemainingStages = staticmethod(_libsumo.person_getRemainingStages)
    __swig_getmethods__["getStage"] = lambda x: _libsumo.person_getStage
    if _newclass:
        getStage = staticmethod(_libsumo.person_getStage)
    __swig_getmethods__["getEdges"] = lambda x: _libsumo.person_getEdges
    if _newclass:
        getEdges = staticmethod(_libsumo.person_getEdges)
    __swig_getmethods__["getParameter"] = lambda x: _libsumo.person_getParameter
    if _newclass:
        getParameter = staticmethod(_libsumo.person_getParameter)
    __swig_getmethods__["getAngle"] = lambda x: _libsumo.person_getAngle
    if _newclass:
        getAngle = staticmethod(_libsumo.person_getAngle)
    __swig_getmethods__["getLanePosition"] = lambda x: _libsumo.person_getLanePosition
    if _newclass:
        getLanePosition = staticmethod(_libsumo.person_getLanePosition)
    __swig_getmethods__["getColor"] = lambda x: _libsumo.person_getColor
    if _newclass:
        getColor = staticmethod(_libsumo.person_getColor)
    __swig_getmethods__["add"] = lambda x: _libsumo.person_add
    if _newclass:
        add = staticmethod(_libsumo.person_add)
    __swig_getmethods__["appendWaitingStage"] = lambda x: _libsumo.person_appendWaitingStage
    if _newclass:
        appendWaitingStage = staticmethod(_libsumo.person_appendWaitingStage)
    __swig_getmethods__["appendWalkingStage"] = lambda x: _libsumo.person_appendWalkingStage
    if _newclass:
        appendWalkingStage = staticmethod(_libsumo.person_appendWalkingStage)
    __swig_getmethods__["appendDrivingStage"] = lambda x: _libsumo.person_appendDrivingStage
    if _newclass:
        appendDrivingStage = staticmethod(_libsumo.person_appendDrivingStage)
    __swig_getmethods__["removeStage"] = lambda x: _libsumo.person_removeStage
    if _newclass:
        removeStage = staticmethod(_libsumo.person_removeStage)
    __swig_getmethods__["rerouteTraveltime"] = lambda x: _libsumo.person_rerouteTraveltime
    if _newclass:
        rerouteTraveltime = staticmethod(_libsumo.person_rerouteTraveltime)
    __swig_getmethods__["moveTo"] = lambda x: _libsumo.person_moveTo
    if _newclass:
        moveTo = staticmethod(_libsumo.person_moveTo)
    __swig_getmethods__["moveToXY"] = lambda x: _libsumo.person_moveToXY
    if _newclass:
        moveToXY = staticmethod(_libsumo.person_moveToXY)
    __swig_getmethods__["setParameter"] = lambda x: _libsumo.person_setParameter
    if _newclass:
        setParameter = staticmethod(_libsumo.person_setParameter)
    __swig_getmethods__["setSpeed"] = lambda x: _libsumo.person_setSpeed
    if _newclass:
        setSpeed = staticmethod(_libsumo.person_setSpeed)
    __swig_getmethods__["setType"] = lambda x: _libsumo.person_setType
    if _newclass:
        setType = staticmethod(_libsumo.person_setType)
    __swig_getmethods__["setLength"] = lambda x: _libsumo.person_setLength
    if _newclass:
        setLength = staticmethod(_libsumo.person_setLength)
    __swig_getmethods__["setWidth"] = lambda x: _libsumo.person_setWidth
    if _newclass:
        setWidth = staticmethod(_libsumo.person_setWidth)
    __swig_getmethods__["setHeight"] = lambda x: _libsumo.person_setHeight
    if _newclass:
        setHeight = staticmethod(_libsumo.person_setHeight)
    __swig_getmethods__["setMinGap"] = lambda x: _libsumo.person_setMinGap
    if _newclass:
        setMinGap = staticmethod(_libsumo.person_setMinGap)
    __swig_getmethods__["setColor"] = lambda x: _libsumo.person_setColor
    if _newclass:
        setColor = staticmethod(_libsumo.person_setColor)
    __swig_getmethods__["getSingularVType"] = lambda x: _libsumo.person_getSingularVType
    if _newclass:
        getSingularVType = staticmethod(_libsumo.person_getSingularVType)
    __swig_destroy__ = _libsumo.delete_person
    __del__ = lambda self: None
person_swigregister = _libsumo.person_swigregister
person_swigregister(person)

def person_getIDList():
    return _libsumo.person_getIDList()
person_getIDList = _libsumo.person_getIDList

def person_getIDCount():
    return _libsumo.person_getIDCount()
person_getIDCount = _libsumo.person_getIDCount

def person_getSpeed(personID):
    return _libsumo.person_getSpeed(personID)
person_getSpeed = _libsumo.person_getSpeed

def person_getPosition(personID):
    return _libsumo.person_getPosition(personID)
person_getPosition = _libsumo.person_getPosition

def person_getRoadID(personID):
    return _libsumo.person_getRoadID(personID)
person_getRoadID = _libsumo.person_getRoadID

def person_getTypeID(personID):
    return _libsumo.person_getTypeID(personID)
person_getTypeID = _libsumo.person_getTypeID

def person_getWaitingTime(personID):
    return _libsumo.person_getWaitingTime(personID)
person_getWaitingTime = _libsumo.person_getWaitingTime

def person_getNextEdge(personID):
    return _libsumo.person_getNextEdge(personID)
person_getNextEdge = _libsumo.person_getNextEdge

def person_getVehicle(personID):
    return _libsumo.person_getVehicle(personID)
person_getVehicle = _libsumo.person_getVehicle

def person_getRemainingStages(personID):
    return _libsumo.person_getRemainingStages(personID)
person_getRemainingStages = _libsumo.person_getRemainingStages

def person_getStage(personID, nextStageIndex=0):
    return _libsumo.person_getStage(personID, nextStageIndex)
person_getStage = _libsumo.person_getStage

def person_getEdges(personID, nextStageIndex=0):
    return _libsumo.person_getEdges(personID, nextStageIndex)
person_getEdges = _libsumo.person_getEdges

def person_getParameter(routeID, param):
    return _libsumo.person_getParameter(routeID, param)
person_getParameter = _libsumo.person_getParameter

def person_getAngle(personID):
    return _libsumo.person_getAngle(personID)
person_getAngle = _libsumo.person_getAngle

def person_getLanePosition(personID):
    return _libsumo.person_getLanePosition(personID)
person_getLanePosition = _libsumo.person_getLanePosition

def person_getColor(personID):
    return _libsumo.person_getColor(personID)
person_getColor = _libsumo.person_getColor

def person_add(*args):
    return _libsumo.person_add(*args)
person_add = _libsumo.person_add

def person_appendWaitingStage(*args):
    return _libsumo.person_appendWaitingStage(*args)
person_appendWaitingStage = _libsumo.person_appendWaitingStage

def person_appendWalkingStage(*args):
    return _libsumo.person_appendWalkingStage(*args)
person_appendWalkingStage = _libsumo.person_appendWalkingStage

def person_appendDrivingStage(*args):
    return _libsumo.person_appendDrivingStage(*args)
person_appendDrivingStage = _libsumo.person_appendDrivingStage

def person_removeStage(personID, nextStageIndex):
    return _libsumo.person_removeStage(personID, nextStageIndex)
person_removeStage = _libsumo.person_removeStage

def person_rerouteTraveltime(personID):
    return _libsumo.person_rerouteTraveltime(personID)
person_rerouteTraveltime = _libsumo.person_rerouteTraveltime

def person_moveTo(personID, edgeID, position):
    return _libsumo.person_moveTo(personID, edgeID, position)
person_moveTo = _libsumo.person_moveTo

def person_moveToXY(personID, edgeID, x, y, angle, keepRouteFlag):
    return _libsumo.person_moveToXY(personID, edgeID, x, y, angle, keepRouteFlag)
person_moveToXY = _libsumo.person_moveToXY

def person_setParameter(personID, key, value):
    return _libsumo.person_setParameter(personID, key, value)
person_setParameter = _libsumo.person_setParameter

def person_setSpeed(personID, speed):
    return _libsumo.person_setSpeed(personID, speed)
person_setSpeed = _libsumo.person_setSpeed

def person_setType(personID, typeID):
    return _libsumo.person_setType(personID, typeID)
person_setType = _libsumo.person_setType

def person_setLength(personID, length):
    return _libsumo.person_setLength(personID, length)
person_setLength = _libsumo.person_setLength

def person_setWidth(personID, width):
    return _libsumo.person_setWidth(personID, width)
person_setWidth = _libsumo.person_setWidth

def person_setHeight(personID, height):
    return _libsumo.person_setHeight(personID, height)
person_setHeight = _libsumo.person_setHeight

def person_setMinGap(personID, minGap):
    return _libsumo.person_setMinGap(personID, minGap)
person_setMinGap = _libsumo.person_setMinGap

def person_setColor(personID, c):
    return _libsumo.person_setColor(personID, c)
person_setColor = _libsumo.person_setColor

def person_getSingularVType(personID):
    return _libsumo.person_getSingularVType(personID)
person_getSingularVType = _libsumo.person_getSingularVType

class poi(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, poi, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, poi, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["getIDList"] = lambda x: _libsumo.poi_getIDList
    if _newclass:
        getIDList = staticmethod(_libsumo.poi_getIDList)
    __swig_getmethods__["getIDCount"] = lambda x: _libsumo.poi_getIDCount
    if _newclass:
        getIDCount = staticmethod(_libsumo.poi_getIDCount)
    __swig_getmethods__["getType"] = lambda x: _libsumo.poi_getType
    if _newclass:
        getType = staticmethod(_libsumo.poi_getType)
    __swig_getmethods__["getPosition"] = lambda x: _libsumo.poi_getPosition
    if _newclass:
        getPosition = staticmethod(_libsumo.poi_getPosition)
    __swig_getmethods__["getColor"] = lambda x: _libsumo.poi_getColor
    if _newclass:
        getColor = staticmethod(_libsumo.poi_getColor)
    __swig_getmethods__["getParameter"] = lambda x: _libsumo.poi_getParameter
    if _newclass:
        getParameter = staticmethod(_libsumo.poi_getParameter)
    __swig_getmethods__["setType"] = lambda x: _libsumo.poi_setType
    if _newclass:
        setType = staticmethod(_libsumo.poi_setType)
    __swig_getmethods__["setColor"] = lambda x: _libsumo.poi_setColor
    if _newclass:
        setColor = staticmethod(_libsumo.poi_setColor)
    __swig_getmethods__["setPosition"] = lambda x: _libsumo.poi_setPosition
    if _newclass:
        setPosition = staticmethod(_libsumo.poi_setPosition)
    __swig_getmethods__["add"] = lambda x: _libsumo.poi_add
    if _newclass:
        add = staticmethod(_libsumo.poi_add)
    __swig_getmethods__["remove"] = lambda x: _libsumo.poi_remove
    if _newclass:
        remove = staticmethod(_libsumo.poi_remove)
    __swig_getmethods__["setParameter"] = lambda x: _libsumo.poi_setParameter
    if _newclass:
        setParameter = staticmethod(_libsumo.poi_setParameter)
    __swig_getmethods__["getTree"] = lambda x: _libsumo.poi_getTree
    if _newclass:
        getTree = staticmethod(_libsumo.poi_getTree)
    __swig_destroy__ = _libsumo.delete_poi
    __del__ = lambda self: None
poi_swigregister = _libsumo.poi_swigregister
poi_swigregister(poi)

def poi_getIDList():
    return _libsumo.poi_getIDList()
poi_getIDList = _libsumo.poi_getIDList

def poi_getIDCount():
    return _libsumo.poi_getIDCount()
poi_getIDCount = _libsumo.poi_getIDCount

def poi_getType(poiID):
    return _libsumo.poi_getType(poiID)
poi_getType = _libsumo.poi_getType

def poi_getPosition(poiID):
    return _libsumo.poi_getPosition(poiID)
poi_getPosition = _libsumo.poi_getPosition

def poi_getColor(poiID):
    return _libsumo.poi_getColor(poiID)
poi_getColor = _libsumo.poi_getColor

def poi_getParameter(poiID, param):
    return _libsumo.poi_getParameter(poiID, param)
poi_getParameter = _libsumo.poi_getParameter

def poi_setType(poiID, setType):
    return _libsumo.poi_setType(poiID, setType)
poi_setType = _libsumo.poi_setType

def poi_setColor(poiID, c):
    return _libsumo.poi_setColor(poiID, c)
poi_setColor = _libsumo.poi_setColor

def poi_setPosition(poiID, pos):
    return _libsumo.poi_setPosition(poiID, pos)
poi_setPosition = _libsumo.poi_setPosition

def poi_add(poiID, pos, c, type, layer):
    return _libsumo.poi_add(poiID, pos, c, type, layer)
poi_add = _libsumo.poi_add

def poi_remove(poiID, layer=0):
    return _libsumo.poi_remove(poiID, layer)
poi_remove = _libsumo.poi_remove

def poi_setParameter(poiID, param, value):
    return _libsumo.poi_setParameter(poiID, param, value)
poi_setParameter = _libsumo.poi_setParameter

def poi_getTree():
    return _libsumo.poi_getTree()
poi_getTree = _libsumo.poi_getTree

class polygon(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, polygon, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, polygon, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["getIDList"] = lambda x: _libsumo.polygon_getIDList
    if _newclass:
        getIDList = staticmethod(_libsumo.polygon_getIDList)
    __swig_getmethods__["getType"] = lambda x: _libsumo.polygon_getType
    if _newclass:
        getType = staticmethod(_libsumo.polygon_getType)
    __swig_getmethods__["getShape"] = lambda x: _libsumo.polygon_getShape
    if _newclass:
        getShape = staticmethod(_libsumo.polygon_getShape)
    __swig_getmethods__["getColor"] = lambda x: _libsumo.polygon_getColor
    if _newclass:
        getColor = staticmethod(_libsumo.polygon_getColor)
    __swig_getmethods__["getFilled"] = lambda x: _libsumo.polygon_getFilled
    if _newclass:
        getFilled = staticmethod(_libsumo.polygon_getFilled)
    __swig_getmethods__["getParameter"] = lambda x: _libsumo.polygon_getParameter
    if _newclass:
        getParameter = staticmethod(_libsumo.polygon_getParameter)
    __swig_getmethods__["setType"] = lambda x: _libsumo.polygon_setType
    if _newclass:
        setType = staticmethod(_libsumo.polygon_setType)
    __swig_getmethods__["setShape"] = lambda x: _libsumo.polygon_setShape
    if _newclass:
        setShape = staticmethod(_libsumo.polygon_setShape)
    __swig_getmethods__["setColor"] = lambda x: _libsumo.polygon_setColor
    if _newclass:
        setColor = staticmethod(_libsumo.polygon_setColor)
    __swig_getmethods__["add"] = lambda x: _libsumo.polygon_add
    if _newclass:
        add = staticmethod(_libsumo.polygon_add)
    __swig_getmethods__["remove"] = lambda x: _libsumo.polygon_remove
    if _newclass:
        remove = staticmethod(_libsumo.polygon_remove)
    __swig_getmethods__["setFilled"] = lambda x: _libsumo.polygon_setFilled
    if _newclass:
        setFilled = staticmethod(_libsumo.polygon_setFilled)
    __swig_getmethods__["setParameter"] = lambda x: _libsumo.polygon_setParameter
    if _newclass:
        setParameter = staticmethod(_libsumo.polygon_setParameter)
    __swig_getmethods__["getTree"] = lambda x: _libsumo.polygon_getTree
    if _newclass:
        getTree = staticmethod(_libsumo.polygon_getTree)
    __swig_destroy__ = _libsumo.delete_polygon
    __del__ = lambda self: None
polygon_swigregister = _libsumo.polygon_swigregister
polygon_swigregister(polygon)

def polygon_getIDList():
    return _libsumo.polygon_getIDList()
polygon_getIDList = _libsumo.polygon_getIDList

def polygon_getType(polygonID):
    return _libsumo.polygon_getType(polygonID)
polygon_getType = _libsumo.polygon_getType

def polygon_getShape(polygonID):
    return _libsumo.polygon_getShape(polygonID)
polygon_getShape = _libsumo.polygon_getShape

def polygon_getColor(polygonID):
    return _libsumo.polygon_getColor(polygonID)
polygon_getColor = _libsumo.polygon_getColor

def polygon_getFilled(polygonID):
    return _libsumo.polygon_getFilled(polygonID)
polygon_getFilled = _libsumo.polygon_getFilled

def polygon_getParameter(polygonID, paramName):
    return _libsumo.polygon_getParameter(polygonID, paramName)
polygon_getParameter = _libsumo.polygon_getParameter

def polygon_setType(polygonID, setType):
    return _libsumo.polygon_setType(polygonID, setType)
polygon_setType = _libsumo.polygon_setType

def polygon_setShape(polygonID, shape):
    return _libsumo.polygon_setShape(polygonID, shape)
polygon_setShape = _libsumo.polygon_setShape

def polygon_setColor(polygonID, c):
    return _libsumo.polygon_setColor(polygonID, c)
polygon_setColor = _libsumo.polygon_setColor

def polygon_add(polygonID, shape, c, fill, type, layer):
    return _libsumo.polygon_add(polygonID, shape, c, fill, type, layer)
polygon_add = _libsumo.polygon_add

def polygon_remove(polygonID, layer=0):
    return _libsumo.polygon_remove(polygonID, layer)
polygon_remove = _libsumo.polygon_remove

def polygon_setFilled(polygonID, filled):
    return _libsumo.polygon_setFilled(polygonID, filled)
polygon_setFilled = _libsumo.polygon_setFilled

def polygon_setParameter(name, value, string):
    return _libsumo.polygon_setParameter(name, value, string)
polygon_setParameter = _libsumo.polygon_setParameter

def polygon_getTree():
    return _libsumo.polygon_getTree()
polygon_getTree = _libsumo.polygon_getTree

class route(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, route, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, route, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["getIDList"] = lambda x: _libsumo.route_getIDList
    if _newclass:
        getIDList = staticmethod(_libsumo.route_getIDList)
    __swig_getmethods__["getIDCount"] = lambda x: _libsumo.route_getIDCount
    if _newclass:
        getIDCount = staticmethod(_libsumo.route_getIDCount)
    __swig_getmethods__["getEdges"] = lambda x: _libsumo.route_getEdges
    if _newclass:
        getEdges = staticmethod(_libsumo.route_getEdges)
    __swig_getmethods__["getParameter"] = lambda x: _libsumo.route_getParameter
    if _newclass:
        getParameter = staticmethod(_libsumo.route_getParameter)
    __swig_getmethods__["add"] = lambda x: _libsumo.route_add
    if _newclass:
        add = staticmethod(_libsumo.route_add)
    __swig_getmethods__["setParameter"] = lambda x: _libsumo.route_setParameter
    if _newclass:
        setParameter = staticmethod(_libsumo.route_setParameter)
    __swig_destroy__ = _libsumo.delete_route
    __del__ = lambda self: None
route_swigregister = _libsumo.route_swigregister
route_swigregister(route)

def route_getIDList():
    return _libsumo.route_getIDList()
route_getIDList = _libsumo.route_getIDList

def route_getIDCount():
    return _libsumo.route_getIDCount()
route_getIDCount = _libsumo.route_getIDCount

def route_getEdges(routeID):
    return _libsumo.route_getEdges(routeID)
route_getEdges = _libsumo.route_getEdges

def route_getParameter(routeID, param):
    return _libsumo.route_getParameter(routeID, param)
route_getParameter = _libsumo.route_getParameter

def route_add(routeID, edgeIDs):
    return _libsumo.route_add(routeID, edgeIDs)
route_add = _libsumo.route_add

def route_setParameter(routeID, key, value):
    return _libsumo.route_setParameter(routeID, key, value)
route_setParameter = _libsumo.route_setParameter

class simulation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, simulation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, simulation, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["load"] = lambda x: _libsumo.simulation_load
    if _newclass:
        load = staticmethod(_libsumo.simulation_load)
    __swig_getmethods__["step"] = lambda x: _libsumo.simulation_step
    if _newclass:
        step = staticmethod(_libsumo.simulation_step)

    def getSubscriptionResults(self, *args):
        return _libsumo.simulation_getSubscriptionResults(self, *args)

    def getContextSubscriptionResults(self, *args):
        return _libsumo.simulation_getContextSubscriptionResults(self, *args)
    __swig_getmethods__["getCurrentTime"] = lambda x: _libsumo.simulation_getCurrentTime
    if _newclass:
        getCurrentTime = staticmethod(_libsumo.simulation_getCurrentTime)
    __swig_getmethods__["getDeltaT"] = lambda x: _libsumo.simulation_getDeltaT
    if _newclass:
        getDeltaT = staticmethod(_libsumo.simulation_getDeltaT)
    __swig_getmethods__["getNetBoundary"] = lambda x: _libsumo.simulation_getNetBoundary
    if _newclass:
        getNetBoundary = staticmethod(_libsumo.simulation_getNetBoundary)
    __swig_getmethods__["getMinExpectedNumber"] = lambda x: _libsumo.simulation_getMinExpectedNumber
    if _newclass:
        getMinExpectedNumber = staticmethod(_libsumo.simulation_getMinExpectedNumber)
    __swig_getmethods__["findRoute"] = lambda x: _libsumo.simulation_findRoute
    if _newclass:
        findRoute = staticmethod(_libsumo.simulation_findRoute)
    __swig_getmethods__["findIntermodalRoute"] = lambda x: _libsumo.simulation_findIntermodalRoute
    if _newclass:
        findIntermodalRoute = staticmethod(_libsumo.simulation_findIntermodalRoute)
    __swig_getmethods__["getParameter"] = lambda x: _libsumo.simulation_getParameter
    if _newclass:
        getParameter = staticmethod(_libsumo.simulation_getParameter)
    __swig_destroy__ = _libsumo.delete_simulation
    __del__ = lambda self: None
simulation_swigregister = _libsumo.simulation_swigregister
simulation_swigregister(simulation)

def simulation_load(args):
    return _libsumo.simulation_load(args)
simulation_load = _libsumo.simulation_load

def simulation_step(time=0):
    return _libsumo.simulation_step(time)
simulation_step = _libsumo.simulation_step

def simulation_getCurrentTime():
    return _libsumo.simulation_getCurrentTime()
simulation_getCurrentTime = _libsumo.simulation_getCurrentTime

def simulation_getDeltaT():
    return _libsumo.simulation_getDeltaT()
simulation_getDeltaT = _libsumo.simulation_getDeltaT

def simulation_getNetBoundary():
    return _libsumo.simulation_getNetBoundary()
simulation_getNetBoundary = _libsumo.simulation_getNetBoundary

def simulation_getMinExpectedNumber():
    return _libsumo.simulation_getMinExpectedNumber()
simulation_getMinExpectedNumber = _libsumo.simulation_getMinExpectedNumber

def simulation_findRoute(arg2, to, typeID, depart, routingMode):
    return _libsumo.simulation_findRoute(arg2, to, typeID, depart, routingMode)
simulation_findRoute = _libsumo.simulation_findRoute

def simulation_findIntermodalRoute(*args):
    return _libsumo.simulation_findIntermodalRoute(*args)
simulation_findIntermodalRoute = _libsumo.simulation_findIntermodalRoute

def simulation_getParameter(objectID, key):
    return _libsumo.simulation_getParameter(objectID, key)
simulation_getParameter = _libsumo.simulation_getParameter

class trafficlight(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, trafficlight, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, trafficlight, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["getIDList"] = lambda x: _libsumo.trafficlight_getIDList
    if _newclass:
        getIDList = staticmethod(_libsumo.trafficlight_getIDList)
    __swig_getmethods__["getIDCount"] = lambda x: _libsumo.trafficlight_getIDCount
    if _newclass:
        getIDCount = staticmethod(_libsumo.trafficlight_getIDCount)
    __swig_getmethods__["getRedYellowGreenState"] = lambda x: _libsumo.trafficlight_getRedYellowGreenState
    if _newclass:
        getRedYellowGreenState = staticmethod(_libsumo.trafficlight_getRedYellowGreenState)
    __swig_getmethods__["getCompleteRedYellowGreenDefinition"] = lambda x: _libsumo.trafficlight_getCompleteRedYellowGreenDefinition
    if _newclass:
        getCompleteRedYellowGreenDefinition = staticmethod(_libsumo.trafficlight_getCompleteRedYellowGreenDefinition)
    __swig_getmethods__["getControlledJunctions"] = lambda x: _libsumo.trafficlight_getControlledJunctions
    if _newclass:
        getControlledJunctions = staticmethod(_libsumo.trafficlight_getControlledJunctions)
    __swig_getmethods__["getControlledLanes"] = lambda x: _libsumo.trafficlight_getControlledLanes
    if _newclass:
        getControlledLanes = staticmethod(_libsumo.trafficlight_getControlledLanes)
    __swig_getmethods__["getControlledLinks"] = lambda x: _libsumo.trafficlight_getControlledLinks
    if _newclass:
        getControlledLinks = staticmethod(_libsumo.trafficlight_getControlledLinks)
    __swig_getmethods__["getProgram"] = lambda x: _libsumo.trafficlight_getProgram
    if _newclass:
        getProgram = staticmethod(_libsumo.trafficlight_getProgram)
    __swig_getmethods__["getPhase"] = lambda x: _libsumo.trafficlight_getPhase
    if _newclass:
        getPhase = staticmethod(_libsumo.trafficlight_getPhase)
    __swig_getmethods__["getPhaseDuration"] = lambda x: _libsumo.trafficlight_getPhaseDuration
    if _newclass:
        getPhaseDuration = staticmethod(_libsumo.trafficlight_getPhaseDuration)
    __swig_getmethods__["getNextSwitch"] = lambda x: _libsumo.trafficlight_getNextSwitch
    if _newclass:
        getNextSwitch = staticmethod(_libsumo.trafficlight_getNextSwitch)
    __swig_getmethods__["getParameter"] = lambda x: _libsumo.trafficlight_getParameter
    if _newclass:
        getParameter = staticmethod(_libsumo.trafficlight_getParameter)
    __swig_getmethods__["setRedYellowGreenState"] = lambda x: _libsumo.trafficlight_setRedYellowGreenState
    if _newclass:
        setRedYellowGreenState = staticmethod(_libsumo.trafficlight_setRedYellowGreenState)
    __swig_getmethods__["setPhase"] = lambda x: _libsumo.trafficlight_setPhase
    if _newclass:
        setPhase = staticmethod(_libsumo.trafficlight_setPhase)
    __swig_getmethods__["setProgram"] = lambda x: _libsumo.trafficlight_setProgram
    if _newclass:
        setProgram = staticmethod(_libsumo.trafficlight_setProgram)
    __swig_getmethods__["setPhaseDuration"] = lambda x: _libsumo.trafficlight_setPhaseDuration
    if _newclass:
        setPhaseDuration = staticmethod(_libsumo.trafficlight_setPhaseDuration)
    __swig_getmethods__["setCompleteRedYellowGreenDefinition"] = lambda x: _libsumo.trafficlight_setCompleteRedYellowGreenDefinition
    if _newclass:
        setCompleteRedYellowGreenDefinition = staticmethod(_libsumo.trafficlight_setCompleteRedYellowGreenDefinition)
    __swig_getmethods__["setParameter"] = lambda x: _libsumo.trafficlight_setParameter
    if _newclass:
        setParameter = staticmethod(_libsumo.trafficlight_setParameter)
    __swig_destroy__ = _libsumo.delete_trafficlight
    __del__ = lambda self: None
trafficlight_swigregister = _libsumo.trafficlight_swigregister
trafficlight_swigregister(trafficlight)

def trafficlight_getIDList():
    return _libsumo.trafficlight_getIDList()
trafficlight_getIDList = _libsumo.trafficlight_getIDList

def trafficlight_getIDCount():
    return _libsumo.trafficlight_getIDCount()
trafficlight_getIDCount = _libsumo.trafficlight_getIDCount

def trafficlight_getRedYellowGreenState(tlsID):
    return _libsumo.trafficlight_getRedYellowGreenState(tlsID)
trafficlight_getRedYellowGreenState = _libsumo.trafficlight_getRedYellowGreenState

def trafficlight_getCompleteRedYellowGreenDefinition(tlsID):
    return _libsumo.trafficlight_getCompleteRedYellowGreenDefinition(tlsID)
trafficlight_getCompleteRedYellowGreenDefinition = _libsumo.trafficlight_getCompleteRedYellowGreenDefinition

def trafficlight_getControlledJunctions(tlsID):
    return _libsumo.trafficlight_getControlledJunctions(tlsID)
trafficlight_getControlledJunctions = _libsumo.trafficlight_getControlledJunctions

def trafficlight_getControlledLanes(tlsID):
    return _libsumo.trafficlight_getControlledLanes(tlsID)
trafficlight_getControlledLanes = _libsumo.trafficlight_getControlledLanes

def trafficlight_getControlledLinks(tlsID):
    return _libsumo.trafficlight_getControlledLinks(tlsID)
trafficlight_getControlledLinks = _libsumo.trafficlight_getControlledLinks

def trafficlight_getProgram(tlsID):
    return _libsumo.trafficlight_getProgram(tlsID)
trafficlight_getProgram = _libsumo.trafficlight_getProgram

def trafficlight_getPhase(tlsID):
    return _libsumo.trafficlight_getPhase(tlsID)
trafficlight_getPhase = _libsumo.trafficlight_getPhase

def trafficlight_getPhaseDuration(tlsID):
    return _libsumo.trafficlight_getPhaseDuration(tlsID)
trafficlight_getPhaseDuration = _libsumo.trafficlight_getPhaseDuration

def trafficlight_getNextSwitch(tlsID):
    return _libsumo.trafficlight_getNextSwitch(tlsID)
trafficlight_getNextSwitch = _libsumo.trafficlight_getNextSwitch

def trafficlight_getParameter(tlsID, paramName):
    return _libsumo.trafficlight_getParameter(tlsID, paramName)
trafficlight_getParameter = _libsumo.trafficlight_getParameter

def trafficlight_setRedYellowGreenState(tlsID, state):
    return _libsumo.trafficlight_setRedYellowGreenState(tlsID, state)
trafficlight_setRedYellowGreenState = _libsumo.trafficlight_setRedYellowGreenState

def trafficlight_setPhase(tlsID, index):
    return _libsumo.trafficlight_setPhase(tlsID, index)
trafficlight_setPhase = _libsumo.trafficlight_setPhase

def trafficlight_setProgram(tlsID, programID):
    return _libsumo.trafficlight_setProgram(tlsID, programID)
trafficlight_setProgram = _libsumo.trafficlight_setProgram

def trafficlight_setPhaseDuration(tlsID, phaseDuration):
    return _libsumo.trafficlight_setPhaseDuration(tlsID, phaseDuration)
trafficlight_setPhaseDuration = _libsumo.trafficlight_setPhaseDuration

def trafficlight_setCompleteRedYellowGreenDefinition(tlsID, logic):
    return _libsumo.trafficlight_setCompleteRedYellowGreenDefinition(tlsID, logic)
trafficlight_setCompleteRedYellowGreenDefinition = _libsumo.trafficlight_setCompleteRedYellowGreenDefinition

def trafficlight_setParameter(tlsID, paramName, value):
    return _libsumo.trafficlight_setParameter(tlsID, paramName, value)
trafficlight_setParameter = _libsumo.trafficlight_setParameter

class vehicle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vehicle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vehicle, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["getIDList"] = lambda x: _libsumo.vehicle_getIDList
    if _newclass:
        getIDList = staticmethod(_libsumo.vehicle_getIDList)
    __swig_getmethods__["getIDCount"] = lambda x: _libsumo.vehicle_getIDCount
    if _newclass:
        getIDCount = staticmethod(_libsumo.vehicle_getIDCount)
    __swig_getmethods__["getSpeed"] = lambda x: _libsumo.vehicle_getSpeed
    if _newclass:
        getSpeed = staticmethod(_libsumo.vehicle_getSpeed)
    __swig_getmethods__["getAcceleration"] = lambda x: _libsumo.vehicle_getAcceleration
    if _newclass:
        getAcceleration = staticmethod(_libsumo.vehicle_getAcceleration)
    __swig_getmethods__["getSpeedWithoutTraCI"] = lambda x: _libsumo.vehicle_getSpeedWithoutTraCI
    if _newclass:
        getSpeedWithoutTraCI = staticmethod(_libsumo.vehicle_getSpeedWithoutTraCI)
    __swig_getmethods__["getPosition"] = lambda x: _libsumo.vehicle_getPosition
    if _newclass:
        getPosition = staticmethod(_libsumo.vehicle_getPosition)
    __swig_getmethods__["getAngle"] = lambda x: _libsumo.vehicle_getAngle
    if _newclass:
        getAngle = staticmethod(_libsumo.vehicle_getAngle)
    __swig_getmethods__["getSlope"] = lambda x: _libsumo.vehicle_getSlope
    if _newclass:
        getSlope = staticmethod(_libsumo.vehicle_getSlope)
    __swig_getmethods__["getRoadID"] = lambda x: _libsumo.vehicle_getRoadID
    if _newclass:
        getRoadID = staticmethod(_libsumo.vehicle_getRoadID)
    __swig_getmethods__["getLaneID"] = lambda x: _libsumo.vehicle_getLaneID
    if _newclass:
        getLaneID = staticmethod(_libsumo.vehicle_getLaneID)
    __swig_getmethods__["getLaneIndex"] = lambda x: _libsumo.vehicle_getLaneIndex
    if _newclass:
        getLaneIndex = staticmethod(_libsumo.vehicle_getLaneIndex)
    __swig_getmethods__["getTypeID"] = lambda x: _libsumo.vehicle_getTypeID
    if _newclass:
        getTypeID = staticmethod(_libsumo.vehicle_getTypeID)
    __swig_getmethods__["getRouteID"] = lambda x: _libsumo.vehicle_getRouteID
    if _newclass:
        getRouteID = staticmethod(_libsumo.vehicle_getRouteID)
    __swig_getmethods__["getRouteIndex"] = lambda x: _libsumo.vehicle_getRouteIndex
    if _newclass:
        getRouteIndex = staticmethod(_libsumo.vehicle_getRouteIndex)
    __swig_getmethods__["getColor"] = lambda x: _libsumo.vehicle_getColor
    if _newclass:
        getColor = staticmethod(_libsumo.vehicle_getColor)
    __swig_getmethods__["getLanePosition"] = lambda x: _libsumo.vehicle_getLanePosition
    if _newclass:
        getLanePosition = staticmethod(_libsumo.vehicle_getLanePosition)
    __swig_getmethods__["getLateralLanePosition"] = lambda x: _libsumo.vehicle_getLateralLanePosition
    if _newclass:
        getLateralLanePosition = staticmethod(_libsumo.vehicle_getLateralLanePosition)
    __swig_getmethods__["getCO2Emission"] = lambda x: _libsumo.vehicle_getCO2Emission
    if _newclass:
        getCO2Emission = staticmethod(_libsumo.vehicle_getCO2Emission)
    __swig_getmethods__["getCOEmission"] = lambda x: _libsumo.vehicle_getCOEmission
    if _newclass:
        getCOEmission = staticmethod(_libsumo.vehicle_getCOEmission)
    __swig_getmethods__["getHCEmission"] = lambda x: _libsumo.vehicle_getHCEmission
    if _newclass:
        getHCEmission = staticmethod(_libsumo.vehicle_getHCEmission)
    __swig_getmethods__["getPMxEmission"] = lambda x: _libsumo.vehicle_getPMxEmission
    if _newclass:
        getPMxEmission = staticmethod(_libsumo.vehicle_getPMxEmission)
    __swig_getmethods__["getNOxEmission"] = lambda x: _libsumo.vehicle_getNOxEmission
    if _newclass:
        getNOxEmission = staticmethod(_libsumo.vehicle_getNOxEmission)
    __swig_getmethods__["getFuelConsumption"] = lambda x: _libsumo.vehicle_getFuelConsumption
    if _newclass:
        getFuelConsumption = staticmethod(_libsumo.vehicle_getFuelConsumption)
    __swig_getmethods__["getNoiseEmission"] = lambda x: _libsumo.vehicle_getNoiseEmission
    if _newclass:
        getNoiseEmission = staticmethod(_libsumo.vehicle_getNoiseEmission)
    __swig_getmethods__["getElectricityConsumption"] = lambda x: _libsumo.vehicle_getElectricityConsumption
    if _newclass:
        getElectricityConsumption = staticmethod(_libsumo.vehicle_getElectricityConsumption)
    __swig_getmethods__["getPersonNumber"] = lambda x: _libsumo.vehicle_getPersonNumber
    if _newclass:
        getPersonNumber = staticmethod(_libsumo.vehicle_getPersonNumber)
    __swig_getmethods__["getLeader"] = lambda x: _libsumo.vehicle_getLeader
    if _newclass:
        getLeader = staticmethod(_libsumo.vehicle_getLeader)
    __swig_getmethods__["getWaitingTime"] = lambda x: _libsumo.vehicle_getWaitingTime
    if _newclass:
        getWaitingTime = staticmethod(_libsumo.vehicle_getWaitingTime)
    __swig_getmethods__["getAccumulatedWaitingTime"] = lambda x: _libsumo.vehicle_getAccumulatedWaitingTime
    if _newclass:
        getAccumulatedWaitingTime = staticmethod(_libsumo.vehicle_getAccumulatedWaitingTime)
    __swig_getmethods__["getAdaptedTraveltime"] = lambda x: _libsumo.vehicle_getAdaptedTraveltime
    if _newclass:
        getAdaptedTraveltime = staticmethod(_libsumo.vehicle_getAdaptedTraveltime)
    __swig_getmethods__["getEffort"] = lambda x: _libsumo.vehicle_getEffort
    if _newclass:
        getEffort = staticmethod(_libsumo.vehicle_getEffort)
    __swig_getmethods__["isRouteValid"] = lambda x: _libsumo.vehicle_isRouteValid
    if _newclass:
        isRouteValid = staticmethod(_libsumo.vehicle_isRouteValid)
    __swig_getmethods__["getEdges"] = lambda x: _libsumo.vehicle_getEdges
    if _newclass:
        getEdges = staticmethod(_libsumo.vehicle_getEdges)
    __swig_getmethods__["getSignalStates"] = lambda x: _libsumo.vehicle_getSignalStates
    if _newclass:
        getSignalStates = staticmethod(_libsumo.vehicle_getSignalStates)
    __swig_getmethods__["getBestLanes"] = lambda x: _libsumo.vehicle_getBestLanes
    if _newclass:
        getBestLanes = staticmethod(_libsumo.vehicle_getBestLanes)
    __swig_getmethods__["getNextTLS"] = lambda x: _libsumo.vehicle_getNextTLS
    if _newclass:
        getNextTLS = staticmethod(_libsumo.vehicle_getNextTLS)
    __swig_getmethods__["getStopState"] = lambda x: _libsumo.vehicle_getStopState
    if _newclass:
        getStopState = staticmethod(_libsumo.vehicle_getStopState)
    __swig_getmethods__["getDistance"] = lambda x: _libsumo.vehicle_getDistance
    if _newclass:
        getDistance = staticmethod(_libsumo.vehicle_getDistance)
    __swig_getmethods__["getDrivingDistance"] = lambda x: _libsumo.vehicle_getDrivingDistance
    if _newclass:
        getDrivingDistance = staticmethod(_libsumo.vehicle_getDrivingDistance)
    __swig_getmethods__["getDrivingDistance2D"] = lambda x: _libsumo.vehicle_getDrivingDistance2D
    if _newclass:
        getDrivingDistance2D = staticmethod(_libsumo.vehicle_getDrivingDistance2D)
    __swig_getmethods__["getAllowedSpeed"] = lambda x: _libsumo.vehicle_getAllowedSpeed
    if _newclass:
        getAllowedSpeed = staticmethod(_libsumo.vehicle_getAllowedSpeed)
    __swig_getmethods__["getSpeedFactor"] = lambda x: _libsumo.vehicle_getSpeedFactor
    if _newclass:
        getSpeedFactor = staticmethod(_libsumo.vehicle_getSpeedFactor)
    __swig_getmethods__["getSpeedMode"] = lambda x: _libsumo.vehicle_getSpeedMode
    if _newclass:
        getSpeedMode = staticmethod(_libsumo.vehicle_getSpeedMode)
    __swig_getmethods__["getLaneChangeMode"] = lambda x: _libsumo.vehicle_getLaneChangeMode
    if _newclass:
        getLaneChangeMode = staticmethod(_libsumo.vehicle_getLaneChangeMode)
    __swig_getmethods__["getRoutingMode"] = lambda x: _libsumo.vehicle_getRoutingMode
    if _newclass:
        getRoutingMode = staticmethod(_libsumo.vehicle_getRoutingMode)
    __swig_getmethods__["getLine"] = lambda x: _libsumo.vehicle_getLine
    if _newclass:
        getLine = staticmethod(_libsumo.vehicle_getLine)
    __swig_getmethods__["getVia"] = lambda x: _libsumo.vehicle_getVia
    if _newclass:
        getVia = staticmethod(_libsumo.vehicle_getVia)
    __swig_getmethods__["getLaneChangeState"] = lambda x: _libsumo.vehicle_getLaneChangeState
    if _newclass:
        getLaneChangeState = staticmethod(_libsumo.vehicle_getLaneChangeState)
    __swig_getmethods__["getParameter"] = lambda x: _libsumo.vehicle_getParameter
    if _newclass:
        getParameter = staticmethod(_libsumo.vehicle_getParameter)
    __swig_getmethods__["getVehicleType"] = lambda x: _libsumo.vehicle_getVehicleType
    if _newclass:
        getVehicleType = staticmethod(_libsumo.vehicle_getVehicleType)
    __swig_getmethods__["getEmissionClass"] = lambda x: _libsumo.vehicle_getEmissionClass
    if _newclass:
        getEmissionClass = staticmethod(_libsumo.vehicle_getEmissionClass)
    __swig_getmethods__["getShapeClass"] = lambda x: _libsumo.vehicle_getShapeClass
    if _newclass:
        getShapeClass = staticmethod(_libsumo.vehicle_getShapeClass)
    __swig_getmethods__["getVClass"] = lambda x: _libsumo.vehicle_getVClass
    if _newclass:
        getVClass = staticmethod(_libsumo.vehicle_getVClass)
    __swig_getmethods__["getLength"] = lambda x: _libsumo.vehicle_getLength
    if _newclass:
        getLength = staticmethod(_libsumo.vehicle_getLength)
    __swig_getmethods__["getAccel"] = lambda x: _libsumo.vehicle_getAccel
    if _newclass:
        getAccel = staticmethod(_libsumo.vehicle_getAccel)
    __swig_getmethods__["getDecel"] = lambda x: _libsumo.vehicle_getDecel
    if _newclass:
        getDecel = staticmethod(_libsumo.vehicle_getDecel)
    __swig_getmethods__["getEmergencyDecel"] = lambda x: _libsumo.vehicle_getEmergencyDecel
    if _newclass:
        getEmergencyDecel = staticmethod(_libsumo.vehicle_getEmergencyDecel)
    __swig_getmethods__["getApparentDecel"] = lambda x: _libsumo.vehicle_getApparentDecel
    if _newclass:
        getApparentDecel = staticmethod(_libsumo.vehicle_getApparentDecel)
    __swig_getmethods__["getActionStepLength"] = lambda x: _libsumo.vehicle_getActionStepLength
    if _newclass:
        getActionStepLength = staticmethod(_libsumo.vehicle_getActionStepLength)
    __swig_getmethods__["getLastActionTime"] = lambda x: _libsumo.vehicle_getLastActionTime
    if _newclass:
        getLastActionTime = staticmethod(_libsumo.vehicle_getLastActionTime)
    __swig_getmethods__["getTau"] = lambda x: _libsumo.vehicle_getTau
    if _newclass:
        getTau = staticmethod(_libsumo.vehicle_getTau)
    __swig_getmethods__["getImperfection"] = lambda x: _libsumo.vehicle_getImperfection
    if _newclass:
        getImperfection = staticmethod(_libsumo.vehicle_getImperfection)
    __swig_getmethods__["getSpeedDeviation"] = lambda x: _libsumo.vehicle_getSpeedDeviation
    if _newclass:
        getSpeedDeviation = staticmethod(_libsumo.vehicle_getSpeedDeviation)
    __swig_getmethods__["getMinGap"] = lambda x: _libsumo.vehicle_getMinGap
    if _newclass:
        getMinGap = staticmethod(_libsumo.vehicle_getMinGap)
    __swig_getmethods__["getMaxSpeed"] = lambda x: _libsumo.vehicle_getMaxSpeed
    if _newclass:
        getMaxSpeed = staticmethod(_libsumo.vehicle_getMaxSpeed)
    __swig_getmethods__["getWidth"] = lambda x: _libsumo.vehicle_getWidth
    if _newclass:
        getWidth = staticmethod(_libsumo.vehicle_getWidth)
    __swig_getmethods__["setStop"] = lambda x: _libsumo.vehicle_setStop
    if _newclass:
        setStop = staticmethod(_libsumo.vehicle_setStop)
    __swig_getmethods__["resume"] = lambda x: _libsumo.vehicle_resume
    if _newclass:
        resume = staticmethod(_libsumo.vehicle_resume)
    __swig_getmethods__["add"] = lambda x: _libsumo.vehicle_add
    if _newclass:
        add = staticmethod(_libsumo.vehicle_add)
    __swig_getmethods__["changeTarget"] = lambda x: _libsumo.vehicle_changeTarget
    if _newclass:
        changeTarget = staticmethod(_libsumo.vehicle_changeTarget)
    __swig_getmethods__["changeLane"] = lambda x: _libsumo.vehicle_changeLane
    if _newclass:
        changeLane = staticmethod(_libsumo.vehicle_changeLane)
    __swig_getmethods__["changeLaneRelative"] = lambda x: _libsumo.vehicle_changeLaneRelative
    if _newclass:
        changeLaneRelative = staticmethod(_libsumo.vehicle_changeLaneRelative)
    __swig_getmethods__["changeSublane"] = lambda x: _libsumo.vehicle_changeSublane
    if _newclass:
        changeSublane = staticmethod(_libsumo.vehicle_changeSublane)
    __swig_getmethods__["slowDown"] = lambda x: _libsumo.vehicle_slowDown
    if _newclass:
        slowDown = staticmethod(_libsumo.vehicle_slowDown)
    __swig_getmethods__["setSpeed"] = lambda x: _libsumo.vehicle_setSpeed
    if _newclass:
        setSpeed = staticmethod(_libsumo.vehicle_setSpeed)
    __swig_getmethods__["setSpeedMode"] = lambda x: _libsumo.vehicle_setSpeedMode
    if _newclass:
        setSpeedMode = staticmethod(_libsumo.vehicle_setSpeedMode)
    __swig_getmethods__["setLaneChangeMode"] = lambda x: _libsumo.vehicle_setLaneChangeMode
    if _newclass:
        setLaneChangeMode = staticmethod(_libsumo.vehicle_setLaneChangeMode)
    __swig_getmethods__["setRoutingMode"] = lambda x: _libsumo.vehicle_setRoutingMode
    if _newclass:
        setRoutingMode = staticmethod(_libsumo.vehicle_setRoutingMode)
    __swig_getmethods__["setType"] = lambda x: _libsumo.vehicle_setType
    if _newclass:
        setType = staticmethod(_libsumo.vehicle_setType)
    __swig_getmethods__["setRouteID"] = lambda x: _libsumo.vehicle_setRouteID
    if _newclass:
        setRouteID = staticmethod(_libsumo.vehicle_setRouteID)
    __swig_getmethods__["setRoute"] = lambda x: _libsumo.vehicle_setRoute
    if _newclass:
        setRoute = staticmethod(_libsumo.vehicle_setRoute)
    __swig_getmethods__["setAdaptedTraveltime"] = lambda x: _libsumo.vehicle_setAdaptedTraveltime
    if _newclass:
        setAdaptedTraveltime = staticmethod(_libsumo.vehicle_setAdaptedTraveltime)
    __swig_getmethods__["setEffort"] = lambda x: _libsumo.vehicle_setEffort
    if _newclass:
        setEffort = staticmethod(_libsumo.vehicle_setEffort)
    __swig_getmethods__["rerouteTraveltime"] = lambda x: _libsumo.vehicle_rerouteTraveltime
    if _newclass:
        rerouteTraveltime = staticmethod(_libsumo.vehicle_rerouteTraveltime)
    __swig_getmethods__["rerouteEffort"] = lambda x: _libsumo.vehicle_rerouteEffort
    if _newclass:
        rerouteEffort = staticmethod(_libsumo.vehicle_rerouteEffort)
    __swig_getmethods__["setSignals"] = lambda x: _libsumo.vehicle_setSignals
    if _newclass:
        setSignals = staticmethod(_libsumo.vehicle_setSignals)
    __swig_getmethods__["moveTo"] = lambda x: _libsumo.vehicle_moveTo
    if _newclass:
        moveTo = staticmethod(_libsumo.vehicle_moveTo)
    __swig_getmethods__["moveToXY"] = lambda x: _libsumo.vehicle_moveToXY
    if _newclass:
        moveToXY = staticmethod(_libsumo.vehicle_moveToXY)
    __swig_getmethods__["setMaxSpeed"] = lambda x: _libsumo.vehicle_setMaxSpeed
    if _newclass:
        setMaxSpeed = staticmethod(_libsumo.vehicle_setMaxSpeed)
    __swig_getmethods__["setActionStepLength"] = lambda x: _libsumo.vehicle_setActionStepLength
    if _newclass:
        setActionStepLength = staticmethod(_libsumo.vehicle_setActionStepLength)
    __swig_getmethods__["remove"] = lambda x: _libsumo.vehicle_remove
    if _newclass:
        remove = staticmethod(_libsumo.vehicle_remove)
    __swig_getmethods__["setColor"] = lambda x: _libsumo.vehicle_setColor
    if _newclass:
        setColor = staticmethod(_libsumo.vehicle_setColor)
    __swig_getmethods__["setSpeedFactor"] = lambda x: _libsumo.vehicle_setSpeedFactor
    if _newclass:
        setSpeedFactor = staticmethod(_libsumo.vehicle_setSpeedFactor)
    __swig_getmethods__["setLine"] = lambda x: _libsumo.vehicle_setLine
    if _newclass:
        setLine = staticmethod(_libsumo.vehicle_setLine)
    __swig_getmethods__["setVia"] = lambda x: _libsumo.vehicle_setVia
    if _newclass:
        setVia = staticmethod(_libsumo.vehicle_setVia)
    __swig_getmethods__["setShapeClass"] = lambda x: _libsumo.vehicle_setShapeClass
    if _newclass:
        setShapeClass = staticmethod(_libsumo.vehicle_setShapeClass)
    __swig_getmethods__["setEmissionClass"] = lambda x: _libsumo.vehicle_setEmissionClass
    if _newclass:
        setEmissionClass = staticmethod(_libsumo.vehicle_setEmissionClass)
    __swig_getmethods__["setParameter"] = lambda x: _libsumo.vehicle_setParameter
    if _newclass:
        setParameter = staticmethod(_libsumo.vehicle_setParameter)
    __swig_destroy__ = _libsumo.delete_vehicle
    __del__ = lambda self: None
vehicle_swigregister = _libsumo.vehicle_swigregister
vehicle_swigregister(vehicle)

def vehicle_getIDList():
    return _libsumo.vehicle_getIDList()
vehicle_getIDList = _libsumo.vehicle_getIDList

def vehicle_getIDCount():
    return _libsumo.vehicle_getIDCount()
vehicle_getIDCount = _libsumo.vehicle_getIDCount

def vehicle_getSpeed(vehicleID):
    return _libsumo.vehicle_getSpeed(vehicleID)
vehicle_getSpeed = _libsumo.vehicle_getSpeed

def vehicle_getAcceleration(vehicleID):
    return _libsumo.vehicle_getAcceleration(vehicleID)
vehicle_getAcceleration = _libsumo.vehicle_getAcceleration

def vehicle_getSpeedWithoutTraCI(vehicleID):
    return _libsumo.vehicle_getSpeedWithoutTraCI(vehicleID)
vehicle_getSpeedWithoutTraCI = _libsumo.vehicle_getSpeedWithoutTraCI

def vehicle_getPosition(vehicleID):
    return _libsumo.vehicle_getPosition(vehicleID)
vehicle_getPosition = _libsumo.vehicle_getPosition

def vehicle_getAngle(vehicleID):
    return _libsumo.vehicle_getAngle(vehicleID)
vehicle_getAngle = _libsumo.vehicle_getAngle

def vehicle_getSlope(vehicleID):
    return _libsumo.vehicle_getSlope(vehicleID)
vehicle_getSlope = _libsumo.vehicle_getSlope

def vehicle_getRoadID(vehicleID):
    return _libsumo.vehicle_getRoadID(vehicleID)
vehicle_getRoadID = _libsumo.vehicle_getRoadID

def vehicle_getLaneID(vehicleID):
    return _libsumo.vehicle_getLaneID(vehicleID)
vehicle_getLaneID = _libsumo.vehicle_getLaneID

def vehicle_getLaneIndex(vehicleID):
    return _libsumo.vehicle_getLaneIndex(vehicleID)
vehicle_getLaneIndex = _libsumo.vehicle_getLaneIndex

def vehicle_getTypeID(vehicleID):
    return _libsumo.vehicle_getTypeID(vehicleID)
vehicle_getTypeID = _libsumo.vehicle_getTypeID

def vehicle_getRouteID(vehicleID):
    return _libsumo.vehicle_getRouteID(vehicleID)
vehicle_getRouteID = _libsumo.vehicle_getRouteID

def vehicle_getRouteIndex(vehicleID):
    return _libsumo.vehicle_getRouteIndex(vehicleID)
vehicle_getRouteIndex = _libsumo.vehicle_getRouteIndex

def vehicle_getColor(vehicleID):
    return _libsumo.vehicle_getColor(vehicleID)
vehicle_getColor = _libsumo.vehicle_getColor

def vehicle_getLanePosition(vehicleID):
    return _libsumo.vehicle_getLanePosition(vehicleID)
vehicle_getLanePosition = _libsumo.vehicle_getLanePosition

def vehicle_getLateralLanePosition(vehicleID):
    return _libsumo.vehicle_getLateralLanePosition(vehicleID)
vehicle_getLateralLanePosition = _libsumo.vehicle_getLateralLanePosition

def vehicle_getCO2Emission(vehicleID):
    return _libsumo.vehicle_getCO2Emission(vehicleID)
vehicle_getCO2Emission = _libsumo.vehicle_getCO2Emission

def vehicle_getCOEmission(vehicleID):
    return _libsumo.vehicle_getCOEmission(vehicleID)
vehicle_getCOEmission = _libsumo.vehicle_getCOEmission

def vehicle_getHCEmission(vehicleID):
    return _libsumo.vehicle_getHCEmission(vehicleID)
vehicle_getHCEmission = _libsumo.vehicle_getHCEmission

def vehicle_getPMxEmission(vehicleID):
    return _libsumo.vehicle_getPMxEmission(vehicleID)
vehicle_getPMxEmission = _libsumo.vehicle_getPMxEmission

def vehicle_getNOxEmission(vehicleID):
    return _libsumo.vehicle_getNOxEmission(vehicleID)
vehicle_getNOxEmission = _libsumo.vehicle_getNOxEmission

def vehicle_getFuelConsumption(vehicleID):
    return _libsumo.vehicle_getFuelConsumption(vehicleID)
vehicle_getFuelConsumption = _libsumo.vehicle_getFuelConsumption

def vehicle_getNoiseEmission(vehicleID):
    return _libsumo.vehicle_getNoiseEmission(vehicleID)
vehicle_getNoiseEmission = _libsumo.vehicle_getNoiseEmission

def vehicle_getElectricityConsumption(vehicleID):
    return _libsumo.vehicle_getElectricityConsumption(vehicleID)
vehicle_getElectricityConsumption = _libsumo.vehicle_getElectricityConsumption

def vehicle_getPersonNumber(vehicleID):
    return _libsumo.vehicle_getPersonNumber(vehicleID)
vehicle_getPersonNumber = _libsumo.vehicle_getPersonNumber

def vehicle_getLeader(vehicleID, dist):
    return _libsumo.vehicle_getLeader(vehicleID, dist)
vehicle_getLeader = _libsumo.vehicle_getLeader

def vehicle_getWaitingTime(vehicleID):
    return _libsumo.vehicle_getWaitingTime(vehicleID)
vehicle_getWaitingTime = _libsumo.vehicle_getWaitingTime

def vehicle_getAccumulatedWaitingTime(vehicleID):
    return _libsumo.vehicle_getAccumulatedWaitingTime(vehicleID)
vehicle_getAccumulatedWaitingTime = _libsumo.vehicle_getAccumulatedWaitingTime

def vehicle_getAdaptedTraveltime(vehicleID, edgeID, time):
    return _libsumo.vehicle_getAdaptedTraveltime(vehicleID, edgeID, time)
vehicle_getAdaptedTraveltime = _libsumo.vehicle_getAdaptedTraveltime

def vehicle_getEffort(vehicleID, edgeID, time):
    return _libsumo.vehicle_getEffort(vehicleID, edgeID, time)
vehicle_getEffort = _libsumo.vehicle_getEffort

def vehicle_isRouteValid(vehicleID):
    return _libsumo.vehicle_isRouteValid(vehicleID)
vehicle_isRouteValid = _libsumo.vehicle_isRouteValid

def vehicle_getEdges(vehicleID):
    return _libsumo.vehicle_getEdges(vehicleID)
vehicle_getEdges = _libsumo.vehicle_getEdges

def vehicle_getSignalStates(vehicleID):
    return _libsumo.vehicle_getSignalStates(vehicleID)
vehicle_getSignalStates = _libsumo.vehicle_getSignalStates

def vehicle_getBestLanes(vehicleID):
    return _libsumo.vehicle_getBestLanes(vehicleID)
vehicle_getBestLanes = _libsumo.vehicle_getBestLanes

def vehicle_getNextTLS(vehicleID):
    return _libsumo.vehicle_getNextTLS(vehicleID)
vehicle_getNextTLS = _libsumo.vehicle_getNextTLS

def vehicle_getStopState(vehicleID):
    return _libsumo.vehicle_getStopState(vehicleID)
vehicle_getStopState = _libsumo.vehicle_getStopState

def vehicle_getDistance(vehicleID):
    return _libsumo.vehicle_getDistance(vehicleID)
vehicle_getDistance = _libsumo.vehicle_getDistance

def vehicle_getDrivingDistance(vehicleID, edgeID, position, laneIndex):
    return _libsumo.vehicle_getDrivingDistance(vehicleID, edgeID, position, laneIndex)
vehicle_getDrivingDistance = _libsumo.vehicle_getDrivingDistance

def vehicle_getDrivingDistance2D(vehicleID, x, y):
    return _libsumo.vehicle_getDrivingDistance2D(vehicleID, x, y)
vehicle_getDrivingDistance2D = _libsumo.vehicle_getDrivingDistance2D

def vehicle_getAllowedSpeed(vehicleID):
    return _libsumo.vehicle_getAllowedSpeed(vehicleID)
vehicle_getAllowedSpeed = _libsumo.vehicle_getAllowedSpeed

def vehicle_getSpeedFactor(vehicleID):
    return _libsumo.vehicle_getSpeedFactor(vehicleID)
vehicle_getSpeedFactor = _libsumo.vehicle_getSpeedFactor

def vehicle_getSpeedMode(vehicleID):
    return _libsumo.vehicle_getSpeedMode(vehicleID)
vehicle_getSpeedMode = _libsumo.vehicle_getSpeedMode

def vehicle_getLaneChangeMode(vehicleID):
    return _libsumo.vehicle_getLaneChangeMode(vehicleID)
vehicle_getLaneChangeMode = _libsumo.vehicle_getLaneChangeMode

def vehicle_getRoutingMode(vehicleID):
    return _libsumo.vehicle_getRoutingMode(vehicleID)
vehicle_getRoutingMode = _libsumo.vehicle_getRoutingMode

def vehicle_getLine(vehicleID):
    return _libsumo.vehicle_getLine(vehicleID)
vehicle_getLine = _libsumo.vehicle_getLine

def vehicle_getVia(vehicleID):
    return _libsumo.vehicle_getVia(vehicleID)
vehicle_getVia = _libsumo.vehicle_getVia

def vehicle_getLaneChangeState(vehicleID, direction):
    return _libsumo.vehicle_getLaneChangeState(vehicleID, direction)
vehicle_getLaneChangeState = _libsumo.vehicle_getLaneChangeState

def vehicle_getParameter(vehicleID, key):
    return _libsumo.vehicle_getParameter(vehicleID, key)
vehicle_getParameter = _libsumo.vehicle_getParameter

def vehicle_getVehicleType(vehicleID):
    return _libsumo.vehicle_getVehicleType(vehicleID)
vehicle_getVehicleType = _libsumo.vehicle_getVehicleType

def vehicle_getEmissionClass(vehicleID):
    return _libsumo.vehicle_getEmissionClass(vehicleID)
vehicle_getEmissionClass = _libsumo.vehicle_getEmissionClass

def vehicle_getShapeClass(vehicleID):
    return _libsumo.vehicle_getShapeClass(vehicleID)
vehicle_getShapeClass = _libsumo.vehicle_getShapeClass

def vehicle_getVClass(vehicleID):
    return _libsumo.vehicle_getVClass(vehicleID)
vehicle_getVClass = _libsumo.vehicle_getVClass

def vehicle_getLength(vehicleID):
    return _libsumo.vehicle_getLength(vehicleID)
vehicle_getLength = _libsumo.vehicle_getLength

def vehicle_getAccel(vehicleID):
    return _libsumo.vehicle_getAccel(vehicleID)
vehicle_getAccel = _libsumo.vehicle_getAccel

def vehicle_getDecel(vehicleID):
    return _libsumo.vehicle_getDecel(vehicleID)
vehicle_getDecel = _libsumo.vehicle_getDecel

def vehicle_getEmergencyDecel(vehicleID):
    return _libsumo.vehicle_getEmergencyDecel(vehicleID)
vehicle_getEmergencyDecel = _libsumo.vehicle_getEmergencyDecel

def vehicle_getApparentDecel(vehicleID):
    return _libsumo.vehicle_getApparentDecel(vehicleID)
vehicle_getApparentDecel = _libsumo.vehicle_getApparentDecel

def vehicle_getActionStepLength(vehicleID):
    return _libsumo.vehicle_getActionStepLength(vehicleID)
vehicle_getActionStepLength = _libsumo.vehicle_getActionStepLength

def vehicle_getLastActionTime(vehicleID):
    return _libsumo.vehicle_getLastActionTime(vehicleID)
vehicle_getLastActionTime = _libsumo.vehicle_getLastActionTime

def vehicle_getTau(vehicleID):
    return _libsumo.vehicle_getTau(vehicleID)
vehicle_getTau = _libsumo.vehicle_getTau

def vehicle_getImperfection(vehicleID):
    return _libsumo.vehicle_getImperfection(vehicleID)
vehicle_getImperfection = _libsumo.vehicle_getImperfection

def vehicle_getSpeedDeviation(vehicleID):
    return _libsumo.vehicle_getSpeedDeviation(vehicleID)
vehicle_getSpeedDeviation = _libsumo.vehicle_getSpeedDeviation

def vehicle_getMinGap(vehicleID):
    return _libsumo.vehicle_getMinGap(vehicleID)
vehicle_getMinGap = _libsumo.vehicle_getMinGap

def vehicle_getMaxSpeed(vehicleID):
    return _libsumo.vehicle_getMaxSpeed(vehicleID)
vehicle_getMaxSpeed = _libsumo.vehicle_getMaxSpeed

def vehicle_getWidth(vehicleID):
    return _libsumo.vehicle_getWidth(vehicleID)
vehicle_getWidth = _libsumo.vehicle_getWidth

def vehicle_setStop(*args):
    return _libsumo.vehicle_setStop(*args)
vehicle_setStop = _libsumo.vehicle_setStop

def vehicle_resume(vehicleID):
    return _libsumo.vehicle_resume(vehicleID)
vehicle_resume = _libsumo.vehicle_resume

def vehicle_add(*args):
    return _libsumo.vehicle_add(*args)
vehicle_add = _libsumo.vehicle_add

def vehicle_changeTarget(vehicleID, edgeID):
    return _libsumo.vehicle_changeTarget(vehicleID, edgeID)
vehicle_changeTarget = _libsumo.vehicle_changeTarget

def vehicle_changeLane(vehicleID, laneIndex, duration):
    return _libsumo.vehicle_changeLane(vehicleID, laneIndex, duration)
vehicle_changeLane = _libsumo.vehicle_changeLane

def vehicle_changeLaneRelative(vehicleID, laneChange, duration):
    return _libsumo.vehicle_changeLaneRelative(vehicleID, laneChange, duration)
vehicle_changeLaneRelative = _libsumo.vehicle_changeLaneRelative

def vehicle_changeSublane(vehicleID, latDist):
    return _libsumo.vehicle_changeSublane(vehicleID, latDist)
vehicle_changeSublane = _libsumo.vehicle_changeSublane

def vehicle_slowDown(vehicleID, speed, duration):
    return _libsumo.vehicle_slowDown(vehicleID, speed, duration)
vehicle_slowDown = _libsumo.vehicle_slowDown

def vehicle_setSpeed(vehicleID, speed):
    return _libsumo.vehicle_setSpeed(vehicleID, speed)
vehicle_setSpeed = _libsumo.vehicle_setSpeed

def vehicle_setSpeedMode(vehicleID, speedMode):
    return _libsumo.vehicle_setSpeedMode(vehicleID, speedMode)
vehicle_setSpeedMode = _libsumo.vehicle_setSpeedMode

def vehicle_setLaneChangeMode(vehicleID, laneChangeMode):
    return _libsumo.vehicle_setLaneChangeMode(vehicleID, laneChangeMode)
vehicle_setLaneChangeMode = _libsumo.vehicle_setLaneChangeMode

def vehicle_setRoutingMode(vehicleID, routingMode):
    return _libsumo.vehicle_setRoutingMode(vehicleID, routingMode)
vehicle_setRoutingMode = _libsumo.vehicle_setRoutingMode

def vehicle_setType(vehicleID, typeID):
    return _libsumo.vehicle_setType(vehicleID, typeID)
vehicle_setType = _libsumo.vehicle_setType

def vehicle_setRouteID(vehicleID, routeID):
    return _libsumo.vehicle_setRouteID(vehicleID, routeID)
vehicle_setRouteID = _libsumo.vehicle_setRouteID

def vehicle_setRoute(vehicleID, edgeIDs):
    return _libsumo.vehicle_setRoute(vehicleID, edgeIDs)
vehicle_setRoute = _libsumo.vehicle_setRoute

def vehicle_setAdaptedTraveltime(*args):
    return _libsumo.vehicle_setAdaptedTraveltime(*args)
vehicle_setAdaptedTraveltime = _libsumo.vehicle_setAdaptedTraveltime

def vehicle_setEffort(*args):
    return _libsumo.vehicle_setEffort(*args)
vehicle_setEffort = _libsumo.vehicle_setEffort

def vehicle_rerouteTraveltime(vehicleID):
    return _libsumo.vehicle_rerouteTraveltime(vehicleID)
vehicle_rerouteTraveltime = _libsumo.vehicle_rerouteTraveltime

def vehicle_rerouteEffort(vehicleID):
    return _libsumo.vehicle_rerouteEffort(vehicleID)
vehicle_rerouteEffort = _libsumo.vehicle_rerouteEffort

def vehicle_setSignals(vehicleID, signals):
    return _libsumo.vehicle_setSignals(vehicleID, signals)
vehicle_setSignals = _libsumo.vehicle_setSignals

def vehicle_moveTo(vehicleID, laneID, position):
    return _libsumo.vehicle_moveTo(vehicleID, laneID, position)
vehicle_moveTo = _libsumo.vehicle_moveTo

def vehicle_moveToXY(vehicleID, edgeID, laneIndex, x, y, angle, keepRouteFlag):
    return _libsumo.vehicle_moveToXY(vehicleID, edgeID, laneIndex, x, y, angle, keepRouteFlag)
vehicle_moveToXY = _libsumo.vehicle_moveToXY

def vehicle_setMaxSpeed(vehicleID, speed):
    return _libsumo.vehicle_setMaxSpeed(vehicleID, speed)
vehicle_setMaxSpeed = _libsumo.vehicle_setMaxSpeed

def vehicle_setActionStepLength(vehicleID, actionStepLength, resetActionOffset=True):
    return _libsumo.vehicle_setActionStepLength(vehicleID, actionStepLength, resetActionOffset)
vehicle_setActionStepLength = _libsumo.vehicle_setActionStepLength

def vehicle_remove(*args):
    return _libsumo.vehicle_remove(*args)
vehicle_remove = _libsumo.vehicle_remove

def vehicle_setColor(vehicleID, col):
    return _libsumo.vehicle_setColor(vehicleID, col)
vehicle_setColor = _libsumo.vehicle_setColor

def vehicle_setSpeedFactor(vehicleID, factor):
    return _libsumo.vehicle_setSpeedFactor(vehicleID, factor)
vehicle_setSpeedFactor = _libsumo.vehicle_setSpeedFactor

def vehicle_setLine(vehicleID, line):
    return _libsumo.vehicle_setLine(vehicleID, line)
vehicle_setLine = _libsumo.vehicle_setLine

def vehicle_setVia(vehicleID, via):
    return _libsumo.vehicle_setVia(vehicleID, via)
vehicle_setVia = _libsumo.vehicle_setVia

def vehicle_setShapeClass(vehicleID, clazz):
    return _libsumo.vehicle_setShapeClass(vehicleID, clazz)
vehicle_setShapeClass = _libsumo.vehicle_setShapeClass

def vehicle_setEmissionClass(vehicleID, clazz):
    return _libsumo.vehicle_setEmissionClass(vehicleID, clazz)
vehicle_setEmissionClass = _libsumo.vehicle_setEmissionClass

def vehicle_setParameter(vehicleID, key, value):
    return _libsumo.vehicle_setParameter(vehicleID, key, value)
vehicle_setParameter = _libsumo.vehicle_setParameter

class vehicletype(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vehicletype, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vehicletype, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["getIDList"] = lambda x: _libsumo.vehicletype_getIDList
    if _newclass:
        getIDList = staticmethod(_libsumo.vehicletype_getIDList)
    __swig_getmethods__["getLength"] = lambda x: _libsumo.vehicletype_getLength
    if _newclass:
        getLength = staticmethod(_libsumo.vehicletype_getLength)
    __swig_getmethods__["getMaxSpeed"] = lambda x: _libsumo.vehicletype_getMaxSpeed
    if _newclass:
        getMaxSpeed = staticmethod(_libsumo.vehicletype_getMaxSpeed)
    __swig_getmethods__["getActionStepLength"] = lambda x: _libsumo.vehicletype_getActionStepLength
    if _newclass:
        getActionStepLength = staticmethod(_libsumo.vehicletype_getActionStepLength)
    __swig_getmethods__["getSpeedFactor"] = lambda x: _libsumo.vehicletype_getSpeedFactor
    if _newclass:
        getSpeedFactor = staticmethod(_libsumo.vehicletype_getSpeedFactor)
    __swig_getmethods__["getSpeedDeviation"] = lambda x: _libsumo.vehicletype_getSpeedDeviation
    if _newclass:
        getSpeedDeviation = staticmethod(_libsumo.vehicletype_getSpeedDeviation)
    __swig_getmethods__["getAccel"] = lambda x: _libsumo.vehicletype_getAccel
    if _newclass:
        getAccel = staticmethod(_libsumo.vehicletype_getAccel)
    __swig_getmethods__["getDecel"] = lambda x: _libsumo.vehicletype_getDecel
    if _newclass:
        getDecel = staticmethod(_libsumo.vehicletype_getDecel)
    __swig_getmethods__["getEmergencyDecel"] = lambda x: _libsumo.vehicletype_getEmergencyDecel
    if _newclass:
        getEmergencyDecel = staticmethod(_libsumo.vehicletype_getEmergencyDecel)
    __swig_getmethods__["getApparentDecel"] = lambda x: _libsumo.vehicletype_getApparentDecel
    if _newclass:
        getApparentDecel = staticmethod(_libsumo.vehicletype_getApparentDecel)
    __swig_getmethods__["getImperfection"] = lambda x: _libsumo.vehicletype_getImperfection
    if _newclass:
        getImperfection = staticmethod(_libsumo.vehicletype_getImperfection)
    __swig_getmethods__["getTau"] = lambda x: _libsumo.vehicletype_getTau
    if _newclass:
        getTau = staticmethod(_libsumo.vehicletype_getTau)
    __swig_getmethods__["getVehicleClass"] = lambda x: _libsumo.vehicletype_getVehicleClass
    if _newclass:
        getVehicleClass = staticmethod(_libsumo.vehicletype_getVehicleClass)
    __swig_getmethods__["getEmissionClass"] = lambda x: _libsumo.vehicletype_getEmissionClass
    if _newclass:
        getEmissionClass = staticmethod(_libsumo.vehicletype_getEmissionClass)
    __swig_getmethods__["getShapeClass"] = lambda x: _libsumo.vehicletype_getShapeClass
    if _newclass:
        getShapeClass = staticmethod(_libsumo.vehicletype_getShapeClass)
    __swig_getmethods__["getMinGap"] = lambda x: _libsumo.vehicletype_getMinGap
    if _newclass:
        getMinGap = staticmethod(_libsumo.vehicletype_getMinGap)
    __swig_getmethods__["getWidth"] = lambda x: _libsumo.vehicletype_getWidth
    if _newclass:
        getWidth = staticmethod(_libsumo.vehicletype_getWidth)
    __swig_getmethods__["getHeight"] = lambda x: _libsumo.vehicletype_getHeight
    if _newclass:
        getHeight = staticmethod(_libsumo.vehicletype_getHeight)
    __swig_getmethods__["getColor"] = lambda x: _libsumo.vehicletype_getColor
    if _newclass:
        getColor = staticmethod(_libsumo.vehicletype_getColor)
    __swig_getmethods__["getMinGapLat"] = lambda x: _libsumo.vehicletype_getMinGapLat
    if _newclass:
        getMinGapLat = staticmethod(_libsumo.vehicletype_getMinGapLat)
    __swig_getmethods__["getMaxSpeedLat"] = lambda x: _libsumo.vehicletype_getMaxSpeedLat
    if _newclass:
        getMaxSpeedLat = staticmethod(_libsumo.vehicletype_getMaxSpeedLat)
    __swig_getmethods__["getLateralAlignment"] = lambda x: _libsumo.vehicletype_getLateralAlignment
    if _newclass:
        getLateralAlignment = staticmethod(_libsumo.vehicletype_getLateralAlignment)
    __swig_getmethods__["getParameter"] = lambda x: _libsumo.vehicletype_getParameter
    if _newclass:
        getParameter = staticmethod(_libsumo.vehicletype_getParameter)
    __swig_getmethods__["setLength"] = lambda x: _libsumo.vehicletype_setLength
    if _newclass:
        setLength = staticmethod(_libsumo.vehicletype_setLength)
    __swig_getmethods__["setMaxSpeed"] = lambda x: _libsumo.vehicletype_setMaxSpeed
    if _newclass:
        setMaxSpeed = staticmethod(_libsumo.vehicletype_setMaxSpeed)
    __swig_getmethods__["setActionStepLength"] = lambda x: _libsumo.vehicletype_setActionStepLength
    if _newclass:
        setActionStepLength = staticmethod(_libsumo.vehicletype_setActionStepLength)
    __swig_getmethods__["setVehicleClass"] = lambda x: _libsumo.vehicletype_setVehicleClass
    if _newclass:
        setVehicleClass = staticmethod(_libsumo.vehicletype_setVehicleClass)
    __swig_getmethods__["setSpeedFactor"] = lambda x: _libsumo.vehicletype_setSpeedFactor
    if _newclass:
        setSpeedFactor = staticmethod(_libsumo.vehicletype_setSpeedFactor)
    __swig_getmethods__["setSpeedDeviation"] = lambda x: _libsumo.vehicletype_setSpeedDeviation
    if _newclass:
        setSpeedDeviation = staticmethod(_libsumo.vehicletype_setSpeedDeviation)
    __swig_getmethods__["setEmissionClass"] = lambda x: _libsumo.vehicletype_setEmissionClass
    if _newclass:
        setEmissionClass = staticmethod(_libsumo.vehicletype_setEmissionClass)
    __swig_getmethods__["setShapeClass"] = lambda x: _libsumo.vehicletype_setShapeClass
    if _newclass:
        setShapeClass = staticmethod(_libsumo.vehicletype_setShapeClass)
    __swig_getmethods__["setWidth"] = lambda x: _libsumo.vehicletype_setWidth
    if _newclass:
        setWidth = staticmethod(_libsumo.vehicletype_setWidth)
    __swig_getmethods__["setHeight"] = lambda x: _libsumo.vehicletype_setHeight
    if _newclass:
        setHeight = staticmethod(_libsumo.vehicletype_setHeight)
    __swig_getmethods__["setMinGap"] = lambda x: _libsumo.vehicletype_setMinGap
    if _newclass:
        setMinGap = staticmethod(_libsumo.vehicletype_setMinGap)
    __swig_getmethods__["setAccel"] = lambda x: _libsumo.vehicletype_setAccel
    if _newclass:
        setAccel = staticmethod(_libsumo.vehicletype_setAccel)
    __swig_getmethods__["setDecel"] = lambda x: _libsumo.vehicletype_setDecel
    if _newclass:
        setDecel = staticmethod(_libsumo.vehicletype_setDecel)
    __swig_getmethods__["setEmergencyDecel"] = lambda x: _libsumo.vehicletype_setEmergencyDecel
    if _newclass:
        setEmergencyDecel = staticmethod(_libsumo.vehicletype_setEmergencyDecel)
    __swig_getmethods__["setApparentDecel"] = lambda x: _libsumo.vehicletype_setApparentDecel
    if _newclass:
        setApparentDecel = staticmethod(_libsumo.vehicletype_setApparentDecel)
    __swig_getmethods__["setImperfection"] = lambda x: _libsumo.vehicletype_setImperfection
    if _newclass:
        setImperfection = staticmethod(_libsumo.vehicletype_setImperfection)
    __swig_getmethods__["setTau"] = lambda x: _libsumo.vehicletype_setTau
    if _newclass:
        setTau = staticmethod(_libsumo.vehicletype_setTau)
    __swig_getmethods__["setColor"] = lambda x: _libsumo.vehicletype_setColor
    if _newclass:
        setColor = staticmethod(_libsumo.vehicletype_setColor)
    __swig_getmethods__["setMinGapLat"] = lambda x: _libsumo.vehicletype_setMinGapLat
    if _newclass:
        setMinGapLat = staticmethod(_libsumo.vehicletype_setMinGapLat)
    __swig_getmethods__["setMaxSpeedLat"] = lambda x: _libsumo.vehicletype_setMaxSpeedLat
    if _newclass:
        setMaxSpeedLat = staticmethod(_libsumo.vehicletype_setMaxSpeedLat)
    __swig_getmethods__["setLateralAlignment"] = lambda x: _libsumo.vehicletype_setLateralAlignment
    if _newclass:
        setLateralAlignment = staticmethod(_libsumo.vehicletype_setLateralAlignment)
    __swig_getmethods__["copy"] = lambda x: _libsumo.vehicletype_copy
    if _newclass:
        copy = staticmethod(_libsumo.vehicletype_copy)
    __swig_getmethods__["getVType"] = lambda x: _libsumo.vehicletype_getVType
    if _newclass:
        getVType = staticmethod(_libsumo.vehicletype_getVType)
    __swig_getmethods__["setParameter"] = lambda x: _libsumo.vehicletype_setParameter
    if _newclass:
        setParameter = staticmethod(_libsumo.vehicletype_setParameter)
    __swig_destroy__ = _libsumo.delete_vehicletype
    __del__ = lambda self: None
vehicletype_swigregister = _libsumo.vehicletype_swigregister
vehicletype_swigregister(vehicletype)

def vehicletype_getIDList():
    return _libsumo.vehicletype_getIDList()
vehicletype_getIDList = _libsumo.vehicletype_getIDList

def vehicletype_getLength(typeID):
    return _libsumo.vehicletype_getLength(typeID)
vehicletype_getLength = _libsumo.vehicletype_getLength

def vehicletype_getMaxSpeed(typeID):
    return _libsumo.vehicletype_getMaxSpeed(typeID)
vehicletype_getMaxSpeed = _libsumo.vehicletype_getMaxSpeed

def vehicletype_getActionStepLength(typeID):
    return _libsumo.vehicletype_getActionStepLength(typeID)
vehicletype_getActionStepLength = _libsumo.vehicletype_getActionStepLength

def vehicletype_getSpeedFactor(typeID):
    return _libsumo.vehicletype_getSpeedFactor(typeID)
vehicletype_getSpeedFactor = _libsumo.vehicletype_getSpeedFactor

def vehicletype_getSpeedDeviation(typeID):
    return _libsumo.vehicletype_getSpeedDeviation(typeID)
vehicletype_getSpeedDeviation = _libsumo.vehicletype_getSpeedDeviation

def vehicletype_getAccel(typeID):
    return _libsumo.vehicletype_getAccel(typeID)
vehicletype_getAccel = _libsumo.vehicletype_getAccel

def vehicletype_getDecel(typeID):
    return _libsumo.vehicletype_getDecel(typeID)
vehicletype_getDecel = _libsumo.vehicletype_getDecel

def vehicletype_getEmergencyDecel(typeID):
    return _libsumo.vehicletype_getEmergencyDecel(typeID)
vehicletype_getEmergencyDecel = _libsumo.vehicletype_getEmergencyDecel

def vehicletype_getApparentDecel(typeID):
    return _libsumo.vehicletype_getApparentDecel(typeID)
vehicletype_getApparentDecel = _libsumo.vehicletype_getApparentDecel

def vehicletype_getImperfection(typeID):
    return _libsumo.vehicletype_getImperfection(typeID)
vehicletype_getImperfection = _libsumo.vehicletype_getImperfection

def vehicletype_getTau(typeID):
    return _libsumo.vehicletype_getTau(typeID)
vehicletype_getTau = _libsumo.vehicletype_getTau

def vehicletype_getVehicleClass(typeID):
    return _libsumo.vehicletype_getVehicleClass(typeID)
vehicletype_getVehicleClass = _libsumo.vehicletype_getVehicleClass

def vehicletype_getEmissionClass(typeID):
    return _libsumo.vehicletype_getEmissionClass(typeID)
vehicletype_getEmissionClass = _libsumo.vehicletype_getEmissionClass

def vehicletype_getShapeClass(typeID):
    return _libsumo.vehicletype_getShapeClass(typeID)
vehicletype_getShapeClass = _libsumo.vehicletype_getShapeClass

def vehicletype_getMinGap(typeID):
    return _libsumo.vehicletype_getMinGap(typeID)
vehicletype_getMinGap = _libsumo.vehicletype_getMinGap

def vehicletype_getWidth(typeID):
    return _libsumo.vehicletype_getWidth(typeID)
vehicletype_getWidth = _libsumo.vehicletype_getWidth

def vehicletype_getHeight(typeID):
    return _libsumo.vehicletype_getHeight(typeID)
vehicletype_getHeight = _libsumo.vehicletype_getHeight

def vehicletype_getColor(typeID):
    return _libsumo.vehicletype_getColor(typeID)
vehicletype_getColor = _libsumo.vehicletype_getColor

def vehicletype_getMinGapLat(typeID):
    return _libsumo.vehicletype_getMinGapLat(typeID)
vehicletype_getMinGapLat = _libsumo.vehicletype_getMinGapLat

def vehicletype_getMaxSpeedLat(typeID):
    return _libsumo.vehicletype_getMaxSpeedLat(typeID)
vehicletype_getMaxSpeedLat = _libsumo.vehicletype_getMaxSpeedLat

def vehicletype_getLateralAlignment(typeID):
    return _libsumo.vehicletype_getLateralAlignment(typeID)
vehicletype_getLateralAlignment = _libsumo.vehicletype_getLateralAlignment

def vehicletype_getParameter(typeID, key):
    return _libsumo.vehicletype_getParameter(typeID, key)
vehicletype_getParameter = _libsumo.vehicletype_getParameter

def vehicletype_setLength(typeID, length):
    return _libsumo.vehicletype_setLength(typeID, length)
vehicletype_setLength = _libsumo.vehicletype_setLength

def vehicletype_setMaxSpeed(typeID, speed):
    return _libsumo.vehicletype_setMaxSpeed(typeID, speed)
vehicletype_setMaxSpeed = _libsumo.vehicletype_setMaxSpeed

def vehicletype_setActionStepLength(typeID, actionStepLength, resetActionOffset):
    return _libsumo.vehicletype_setActionStepLength(typeID, actionStepLength, resetActionOffset)
vehicletype_setActionStepLength = _libsumo.vehicletype_setActionStepLength

def vehicletype_setVehicleClass(typeID, clazz):
    return _libsumo.vehicletype_setVehicleClass(typeID, clazz)
vehicletype_setVehicleClass = _libsumo.vehicletype_setVehicleClass

def vehicletype_setSpeedFactor(typeID, factor):
    return _libsumo.vehicletype_setSpeedFactor(typeID, factor)
vehicletype_setSpeedFactor = _libsumo.vehicletype_setSpeedFactor

def vehicletype_setSpeedDeviation(typeID, deviation):
    return _libsumo.vehicletype_setSpeedDeviation(typeID, deviation)
vehicletype_setSpeedDeviation = _libsumo.vehicletype_setSpeedDeviation

def vehicletype_setEmissionClass(typeID, clazz):
    return _libsumo.vehicletype_setEmissionClass(typeID, clazz)
vehicletype_setEmissionClass = _libsumo.vehicletype_setEmissionClass

def vehicletype_setShapeClass(typeID, shapeClass):
    return _libsumo.vehicletype_setShapeClass(typeID, shapeClass)
vehicletype_setShapeClass = _libsumo.vehicletype_setShapeClass

def vehicletype_setWidth(typeID, width):
    return _libsumo.vehicletype_setWidth(typeID, width)
vehicletype_setWidth = _libsumo.vehicletype_setWidth

def vehicletype_setHeight(typeID, height):
    return _libsumo.vehicletype_setHeight(typeID, height)
vehicletype_setHeight = _libsumo.vehicletype_setHeight

def vehicletype_setMinGap(typeID, minGap):
    return _libsumo.vehicletype_setMinGap(typeID, minGap)
vehicletype_setMinGap = _libsumo.vehicletype_setMinGap

def vehicletype_setAccel(typeID, accel):
    return _libsumo.vehicletype_setAccel(typeID, accel)
vehicletype_setAccel = _libsumo.vehicletype_setAccel

def vehicletype_setDecel(typeID, decel):
    return _libsumo.vehicletype_setDecel(typeID, decel)
vehicletype_setDecel = _libsumo.vehicletype_setDecel

def vehicletype_setEmergencyDecel(typeID, decel):
    return _libsumo.vehicletype_setEmergencyDecel(typeID, decel)
vehicletype_setEmergencyDecel = _libsumo.vehicletype_setEmergencyDecel

def vehicletype_setApparentDecel(typeID, decel):
    return _libsumo.vehicletype_setApparentDecel(typeID, decel)
vehicletype_setApparentDecel = _libsumo.vehicletype_setApparentDecel

def vehicletype_setImperfection(typeID, imperfection):
    return _libsumo.vehicletype_setImperfection(typeID, imperfection)
vehicletype_setImperfection = _libsumo.vehicletype_setImperfection

def vehicletype_setTau(typeID, tau):
    return _libsumo.vehicletype_setTau(typeID, tau)
vehicletype_setTau = _libsumo.vehicletype_setTau

def vehicletype_setColor(typeID, c):
    return _libsumo.vehicletype_setColor(typeID, c)
vehicletype_setColor = _libsumo.vehicletype_setColor

def vehicletype_setMinGapLat(typeID, minGapLat):
    return _libsumo.vehicletype_setMinGapLat(typeID, minGapLat)
vehicletype_setMinGapLat = _libsumo.vehicletype_setMinGapLat

def vehicletype_setMaxSpeedLat(typeID, speed):
    return _libsumo.vehicletype_setMaxSpeedLat(typeID, speed)
vehicletype_setMaxSpeedLat = _libsumo.vehicletype_setMaxSpeedLat

def vehicletype_setLateralAlignment(typeID, latAlignment):
    return _libsumo.vehicletype_setLateralAlignment(typeID, latAlignment)
vehicletype_setLateralAlignment = _libsumo.vehicletype_setLateralAlignment

def vehicletype_copy(origTypeID, newTypeID):
    return _libsumo.vehicletype_copy(origTypeID, newTypeID)
vehicletype_copy = _libsumo.vehicletype_copy

def vehicletype_getVType(id):
    return _libsumo.vehicletype_getVType(id)
vehicletype_getVType = _libsumo.vehicletype_getVType

def vehicletype_setParameter(id, name, value):
    return _libsumo.vehicletype_setParameter(id, name, value)
vehicletype_setParameter = _libsumo.vehicletype_setParameter

# This file is compatible with both classic and new-style classes.


